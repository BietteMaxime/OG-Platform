/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.security.fx;

import java.util.Map;

import javax.time.calendar.ZonedDateTime;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.security.SecuritySource;
import com.opengamma.financial.security.FinancialSecurity;
import com.opengamma.financial.security.FinancialSecurityVisitor;
import com.opengamma.id.ExternalId;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.util.money.Currency;

/**
 * A security for Non-deliverable FX forwards.
 */
@BeanDefinition
public class NonDeliverableFXForwardSecurity extends FinancialSecurity {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The security type.
   */
  public static final String SECURITY_TYPE = "NONDELIVERABLE_FX_FORWARD";

  /**
   * The underlying identifier.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _underlyingId;
  /**
   * The forward date.
   */
  @PropertyDefinition(validate = "notNull")
  private ZonedDateTime _forwardDate;
  /**
   * The region.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _regionId;

  /**
   * Whether the currency in which the settlement is made is the call currency (otherwise it's the put currency).
   */
  @PropertyDefinition
  private boolean _deliveryInReceiveCurrency;
  
  NonDeliverableFXForwardSecurity() { //For builder
    super();
  }

  public NonDeliverableFXForwardSecurity(ExternalId underlyingIdentifier, ZonedDateTime forwardDate, ExternalId region, boolean deliveryInReceiveCurrency) {
    super(SECURITY_TYPE);
    setUnderlyingId(underlyingIdentifier);
    setForwardDate(forwardDate);
    setRegionId(region);
    setDeliveryInReceiveCurrency(deliveryInReceiveCurrency);
  }

  public Currency getDeliveryCurrency(SecuritySource securitySource) {
    FXSecurity fxSecurity = (FXSecurity) securitySource.getSecurity(ExternalIdBundle.of(getUnderlyingId()));
    return isDeliveryInReceiveCurrency() ? fxSecurity.getReceiveCurrency() : fxSecurity.getPayCurrency();
  }
  
  //-------------------------------------------------------------------------
  @Override
  public final <T> T accept(FinancialSecurityVisitor<T> visitor) {
    return visitor.visitNonDeliverableFXForwardSecurity(this);
  }

  /**
   * Accepts a visitor to manage traversal of the hierarchy.
   * 
   * @param <T> the result type of the visitor
   * @param visitor  the visitor, not null
   * @return the result
   */
  public <T> T accept(NonDeliverableFXForwardSecurityVisitor<T> visitor) {
    return visitor.visitNonDeliverableFXForwardSecurity(this);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code NonDeliverableFXForwardSecurity}.
   * @return the meta-bean, not null
   */
  public static NonDeliverableFXForwardSecurity.Meta meta() {
    return NonDeliverableFXForwardSecurity.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(NonDeliverableFXForwardSecurity.Meta.INSTANCE);
  }

  @Override
  public NonDeliverableFXForwardSecurity.Meta metaBean() {
    return NonDeliverableFXForwardSecurity.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -771625640:  // underlyingId
        return getUnderlyingId();
      case 1652755475:  // forwardDate
        return getForwardDate();
      case -690339025:  // regionId
        return getRegionId();
      case -1578804581:  // deliveryInReceiveCurrency
        return isDeliveryInReceiveCurrency();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -771625640:  // underlyingId
        setUnderlyingId((ExternalId) newValue);
        return;
      case 1652755475:  // forwardDate
        setForwardDate((ZonedDateTime) newValue);
        return;
      case -690339025:  // regionId
        setRegionId((ExternalId) newValue);
        return;
      case -1578804581:  // deliveryInReceiveCurrency
        setDeliveryInReceiveCurrency((Boolean) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_underlyingId, "underlyingId");
    JodaBeanUtils.notNull(_forwardDate, "forwardDate");
    JodaBeanUtils.notNull(_regionId, "regionId");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      NonDeliverableFXForwardSecurity other = (NonDeliverableFXForwardSecurity) obj;
      return JodaBeanUtils.equal(getUnderlyingId(), other.getUnderlyingId()) &&
          JodaBeanUtils.equal(getForwardDate(), other.getForwardDate()) &&
          JodaBeanUtils.equal(getRegionId(), other.getRegionId()) &&
          JodaBeanUtils.equal(isDeliveryInReceiveCurrency(), other.isDeliveryInReceiveCurrency()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getUnderlyingId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getForwardDate());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRegionId());
    hash += hash * 31 + JodaBeanUtils.hashCode(isDeliveryInReceiveCurrency());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying identifier.
   * @return the value of the property, not null
   */
  public ExternalId getUnderlyingId() {
    return _underlyingId;
  }

  /**
   * Sets the underlying identifier.
   * @param underlyingId  the new value of the property, not null
   */
  public void setUnderlyingId(ExternalId underlyingId) {
    JodaBeanUtils.notNull(underlyingId, "underlyingId");
    this._underlyingId = underlyingId;
  }

  /**
   * Gets the the {@code underlyingId} property.
   * @return the property, not null
   */
  public final Property<ExternalId> underlyingId() {
    return metaBean().underlyingId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the forward date.
   * @return the value of the property, not null
   */
  public ZonedDateTime getForwardDate() {
    return _forwardDate;
  }

  /**
   * Sets the forward date.
   * @param forwardDate  the new value of the property, not null
   */
  public void setForwardDate(ZonedDateTime forwardDate) {
    JodaBeanUtils.notNull(forwardDate, "forwardDate");
    this._forwardDate = forwardDate;
  }

  /**
   * Gets the the {@code forwardDate} property.
   * @return the property, not null
   */
  public final Property<ZonedDateTime> forwardDate() {
    return metaBean().forwardDate().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the region.
   * @return the value of the property, not null
   */
  public ExternalId getRegionId() {
    return _regionId;
  }

  /**
   * Sets the region.
   * @param regionId  the new value of the property, not null
   */
  public void setRegionId(ExternalId regionId) {
    JodaBeanUtils.notNull(regionId, "regionId");
    this._regionId = regionId;
  }

  /**
   * Gets the the {@code regionId} property.
   * @return the property, not null
   */
  public final Property<ExternalId> regionId() {
    return metaBean().regionId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets whether the currency in which the settlement is made is the call currency (otherwise it's the put currency).
   * @return the value of the property
   */
  public boolean isDeliveryInReceiveCurrency() {
    return _deliveryInReceiveCurrency;
  }

  /**
   * Sets whether the currency in which the settlement is made is the call currency (otherwise it's the put currency).
   * @param deliveryInReceiveCurrency  the new value of the property
   */
  public void setDeliveryInReceiveCurrency(boolean deliveryInReceiveCurrency) {
    this._deliveryInReceiveCurrency = deliveryInReceiveCurrency;
  }

  /**
   * Gets the the {@code deliveryInReceiveCurrency} property.
   * @return the property, not null
   */
  public final Property<Boolean> deliveryInReceiveCurrency() {
    return metaBean().deliveryInReceiveCurrency().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code NonDeliverableFXForwardSecurity}.
   */
  public static class Meta extends FinancialSecurity.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code underlyingId} property.
     */
    private final MetaProperty<ExternalId> _underlyingId = DirectMetaProperty.ofReadWrite(
        this, "underlyingId", NonDeliverableFXForwardSecurity.class, ExternalId.class);
    /**
     * The meta-property for the {@code forwardDate} property.
     */
    private final MetaProperty<ZonedDateTime> _forwardDate = DirectMetaProperty.ofReadWrite(
        this, "forwardDate", NonDeliverableFXForwardSecurity.class, ZonedDateTime.class);
    /**
     * The meta-property for the {@code regionId} property.
     */
    private final MetaProperty<ExternalId> _regionId = DirectMetaProperty.ofReadWrite(
        this, "regionId", NonDeliverableFXForwardSecurity.class, ExternalId.class);
    /**
     * The meta-property for the {@code deliveryInReceiveCurrency} property.
     */
    private final MetaProperty<Boolean> _deliveryInReceiveCurrency = DirectMetaProperty.ofReadWrite(
        this, "deliveryInReceiveCurrency", NonDeliverableFXForwardSecurity.class, Boolean.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "underlyingId",
        "forwardDate",
        "regionId",
        "deliveryInReceiveCurrency");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -771625640:  // underlyingId
          return _underlyingId;
        case 1652755475:  // forwardDate
          return _forwardDate;
        case -690339025:  // regionId
          return _regionId;
        case -1578804581:  // deliveryInReceiveCurrency
          return _deliveryInReceiveCurrency;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends NonDeliverableFXForwardSecurity> builder() {
      return new DirectBeanBuilder<NonDeliverableFXForwardSecurity>(new NonDeliverableFXForwardSecurity());
    }

    @Override
    public Class<? extends NonDeliverableFXForwardSecurity> beanType() {
      return NonDeliverableFXForwardSecurity.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code underlyingId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> underlyingId() {
      return _underlyingId;
    }

    /**
     * The meta-property for the {@code forwardDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ZonedDateTime> forwardDate() {
      return _forwardDate;
    }

    /**
     * The meta-property for the {@code regionId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> regionId() {
      return _regionId;
    }

    /**
     * The meta-property for the {@code deliveryInReceiveCurrency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Boolean> deliveryInReceiveCurrency() {
      return _deliveryInReceiveCurrency;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
