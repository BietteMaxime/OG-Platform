/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.convention;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.analytics.financial.interestrate.CompoundingType;
import com.opengamma.id.ExternalId;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.util.time.Tenor;

/**
 *
 */
@BeanDefinition
public class CompoundingIborLegConvention extends Convention {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The ibor index convention.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _iborIndexConvention;

  /**
   * The payment tenor.
   */
  @PropertyDefinition(validate = "notNull")
  private Tenor _paymentTenor;

  /**
   * The compounding type.
   */
  @PropertyDefinition(validate = "notNull")
  private CompoundingType _compoundingType;

  /**
   * For the builder
   */
  public CompoundingIborLegConvention() {
  }

  public CompoundingIborLegConvention(final String name, final ExternalIdBundle externalIdBundle, final ExternalId iborIndexConvention, final Tenor paymentTenor,
      final CompoundingType compoundingType) {
    super(name, externalIdBundle);
    setIborIndexConvention(iborIndexConvention);
    setPaymentTenor(paymentTenor);
    setCompoundingType(compoundingType);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CompoundingIborLegConvention}.
   * @return the meta-bean, not null
   */
  public static CompoundingIborLegConvention.Meta meta() {
    return CompoundingIborLegConvention.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(CompoundingIborLegConvention.Meta.INSTANCE);
  }

  @Override
  public CompoundingIborLegConvention.Meta metaBean() {
    return CompoundingIborLegConvention.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1542426233:  // iborIndexConvention
        return getIborIndexConvention();
      case -507548582:  // paymentTenor
        return getPaymentTenor();
      case -1936397775:  // compoundingType
        return getCompoundingType();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1542426233:  // iborIndexConvention
        setIborIndexConvention((ExternalId) newValue);
        return;
      case -507548582:  // paymentTenor
        setPaymentTenor((Tenor) newValue);
        return;
      case -1936397775:  // compoundingType
        setCompoundingType((CompoundingType) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_iborIndexConvention, "iborIndexConvention");
    JodaBeanUtils.notNull(_paymentTenor, "paymentTenor");
    JodaBeanUtils.notNull(_compoundingType, "compoundingType");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CompoundingIborLegConvention other = (CompoundingIborLegConvention) obj;
      return JodaBeanUtils.equal(getIborIndexConvention(), other.getIborIndexConvention()) &&
          JodaBeanUtils.equal(getPaymentTenor(), other.getPaymentTenor()) &&
          JodaBeanUtils.equal(getCompoundingType(), other.getCompoundingType()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getIborIndexConvention());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPaymentTenor());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCompoundingType());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the ibor index convention.
   * @return the value of the property, not null
   */
  public ExternalId getIborIndexConvention() {
    return _iborIndexConvention;
  }

  /**
   * Sets the ibor index convention.
   * @param iborIndexConvention  the new value of the property, not null
   */
  public void setIborIndexConvention(ExternalId iborIndexConvention) {
    JodaBeanUtils.notNull(iborIndexConvention, "iborIndexConvention");
    this._iborIndexConvention = iborIndexConvention;
  }

  /**
   * Gets the the {@code iborIndexConvention} property.
   * @return the property, not null
   */
  public final Property<ExternalId> iborIndexConvention() {
    return metaBean().iborIndexConvention().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the payment tenor.
   * @return the value of the property, not null
   */
  public Tenor getPaymentTenor() {
    return _paymentTenor;
  }

  /**
   * Sets the payment tenor.
   * @param paymentTenor  the new value of the property, not null
   */
  public void setPaymentTenor(Tenor paymentTenor) {
    JodaBeanUtils.notNull(paymentTenor, "paymentTenor");
    this._paymentTenor = paymentTenor;
  }

  /**
   * Gets the the {@code paymentTenor} property.
   * @return the property, not null
   */
  public final Property<Tenor> paymentTenor() {
    return metaBean().paymentTenor().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the compounding type.
   * @return the value of the property, not null
   */
  public CompoundingType getCompoundingType() {
    return _compoundingType;
  }

  /**
   * Sets the compounding type.
   * @param compoundingType  the new value of the property, not null
   */
  public void setCompoundingType(CompoundingType compoundingType) {
    JodaBeanUtils.notNull(compoundingType, "compoundingType");
    this._compoundingType = compoundingType;
  }

  /**
   * Gets the the {@code compoundingType} property.
   * @return the property, not null
   */
  public final Property<CompoundingType> compoundingType() {
    return metaBean().compoundingType().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CompoundingIborLegConvention}.
   */
  public static class Meta extends Convention.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code iborIndexConvention} property.
     */
    private final MetaProperty<ExternalId> _iborIndexConvention = DirectMetaProperty.ofReadWrite(
        this, "iborIndexConvention", CompoundingIborLegConvention.class, ExternalId.class);
    /**
     * The meta-property for the {@code paymentTenor} property.
     */
    private final MetaProperty<Tenor> _paymentTenor = DirectMetaProperty.ofReadWrite(
        this, "paymentTenor", CompoundingIborLegConvention.class, Tenor.class);
    /**
     * The meta-property for the {@code compoundingType} property.
     */
    private final MetaProperty<CompoundingType> _compoundingType = DirectMetaProperty.ofReadWrite(
        this, "compoundingType", CompoundingIborLegConvention.class, CompoundingType.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "iborIndexConvention",
        "paymentTenor",
        "compoundingType");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1542426233:  // iborIndexConvention
          return _iborIndexConvention;
        case -507548582:  // paymentTenor
          return _paymentTenor;
        case -1936397775:  // compoundingType
          return _compoundingType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CompoundingIborLegConvention> builder() {
      return new DirectBeanBuilder<CompoundingIborLegConvention>(new CompoundingIborLegConvention());
    }

    @Override
    public Class<? extends CompoundingIborLegConvention> beanType() {
      return CompoundingIborLegConvention.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code iborIndexConvention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> iborIndexConvention() {
      return _iborIndexConvention;
    }

    /**
     * The meta-property for the {@code paymentTenor} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Tenor> paymentTenor() {
      return _paymentTenor;
    }

    /**
     * The meta-property for the {@code compoundingType} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<CompoundingType> compoundingType() {
      return _compoundingType;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
