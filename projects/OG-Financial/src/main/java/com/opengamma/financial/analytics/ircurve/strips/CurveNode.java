/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.analytics.ircurve.strips;

import java.io.Serializable;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.value.MarketDataRequirementNames;
import com.opengamma.util.time.Tenor;

/**
 * Base class describing a node on a curve.
 */
@BeanDefinition
public abstract class CurveNode extends DirectBean implements Serializable, Comparable<CurveNode> {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The curve node id mapper name.
   */
  @PropertyDefinition(validate = "notNull")
  private String _curveNodeIdMapperName;

  /* package */CurveNode() {
    super();
  }

  /**
   * @param curveNodeIdMapperName The name of the id mapper, not null
   */
  public CurveNode(final String curveNodeIdMapperName) {
    setCurveNodeIdMapperName(curveNodeIdMapperName);
  }

  /**
   * Gets the resolved maturity of the node.
   * @return The resolved maturity of the node
   */
  public abstract Tenor getResolvedMaturity();

  @Override
  public int compareTo(final CurveNode other) {
    final int result = getResolvedMaturity().compareTo(other.getResolvedMaturity());
    if (result != 0) {
      return result;
    }
    return getClass().getName().compareTo(other.getClass().getName());
  }

  /**
   * Accept method for the visitor pattern.
   * @param <T> The return type of the visitor
   * @param visitor The visitor, not null
   * @return The result.
   */
  public abstract <T> T accept(CurveNodeVisitor<T> visitor);

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CurveNode}.
   * @return the meta-bean, not null
   */
  public static CurveNode.Meta meta() {
    return CurveNode.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(CurveNode.Meta.INSTANCE);
  }

  @Override
  public CurveNode.Meta metaBean() {
    return CurveNode.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 305053208:  // curveNodeIdMapperName
        return getCurveNodeIdMapperName();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 305053208:  // curveNodeIdMapperName
        setCurveNodeIdMapperName((String) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_curveNodeIdMapperName, "curveNodeIdMapperName");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CurveNode other = (CurveNode) obj;
      return JodaBeanUtils.equal(getCurveNodeIdMapperName(), other.getCurveNodeIdMapperName());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getCurveNodeIdMapperName());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the curve node id mapper name.
   * @return the value of the property, not null
   */
  public String getCurveNodeIdMapperName() {
    return _curveNodeIdMapperName;
  }

  /**
   * Sets the curve node id mapper name.
   * @param curveNodeIdMapperName  the new value of the property, not null
   */
  public void setCurveNodeIdMapperName(String curveNodeIdMapperName) {
    JodaBeanUtils.notNull(curveNodeIdMapperName, "curveNodeIdMapperName");
    this._curveNodeIdMapperName = curveNodeIdMapperName;
  }

  /**
   * Gets the the {@code curveNodeIdMapperName} property.
   * @return the property, not null
   */
  public final Property<String> curveNodeIdMapperName() {
    return metaBean().curveNodeIdMapperName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CurveNode}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code curveNodeIdMapperName} property.
     */
    private final MetaProperty<String> _curveNodeIdMapperName = DirectMetaProperty.ofReadWrite(
        this, "curveNodeIdMapperName", CurveNode.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "curveNodeIdMapperName");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 305053208:  // curveNodeIdMapperName
          return _curveNodeIdMapperName;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CurveNode> builder() {
      throw new UnsupportedOperationException("CurveNode is an abstract class");
    }

    @Override
    public Class<? extends CurveNode> beanType() {
      return CurveNode.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code curveNodeIdMapperName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> curveNodeIdMapperName() {
      return _curveNodeIdMapperName;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
