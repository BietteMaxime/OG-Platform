/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.financial.convention;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalId;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.util.time.Tenor;

/**
 * Temporary convention to contain information about the start and end tenors associated with a ticker until there is
 * a mechanism for storing these pieces of information in a convention master.
 */
@BeanDefinition
public class ForwardTickerConvention extends Convention {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The id of the underlying convention.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _underlyingConvention;

  /**
   * The start tenor.
   */
  @PropertyDefinition(validate = "notNull")
  private Tenor _startTenor;

  /**
   * The end tenor.
   */
  @PropertyDefinition(validate = "notNull")
  private Tenor _endTenor;

  /* package */ForwardTickerConvention() {
  }

  public ForwardTickerConvention(final String name, final ExternalIdBundle externalIdBundle, final ExternalId underlyingConvention, final Tenor startTenor, final Tenor endTenor) {
    super(name, externalIdBundle);
    setUnderlyingConvention(underlyingConvention);
    setStartTenor(startTenor);
    setEndTenor(endTenor);
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ForwardTickerConvention}.
   * @return the meta-bean, not null
   */
  public static ForwardTickerConvention.Meta meta() {
    return ForwardTickerConvention.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(ForwardTickerConvention.Meta.INSTANCE);
  }

  @Override
  public ForwardTickerConvention.Meta metaBean() {
    return ForwardTickerConvention.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -268325202:  // underlyingConvention
        return getUnderlyingConvention();
      case -1583746178:  // startTenor
        return getStartTenor();
      case 1714950821:  // endTenor
        return getEndTenor();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -268325202:  // underlyingConvention
        setUnderlyingConvention((ExternalId) newValue);
        return;
      case -1583746178:  // startTenor
        setStartTenor((Tenor) newValue);
        return;
      case 1714950821:  // endTenor
        setEndTenor((Tenor) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_underlyingConvention, "underlyingConvention");
    JodaBeanUtils.notNull(_startTenor, "startTenor");
    JodaBeanUtils.notNull(_endTenor, "endTenor");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ForwardTickerConvention other = (ForwardTickerConvention) obj;
      return JodaBeanUtils.equal(getUnderlyingConvention(), other.getUnderlyingConvention()) &&
          JodaBeanUtils.equal(getStartTenor(), other.getStartTenor()) &&
          JodaBeanUtils.equal(getEndTenor(), other.getEndTenor()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getUnderlyingConvention());
    hash += hash * 31 + JodaBeanUtils.hashCode(getStartTenor());
    hash += hash * 31 + JodaBeanUtils.hashCode(getEndTenor());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the id of the underlying convention.
   * @return the value of the property, not null
   */
  public ExternalId getUnderlyingConvention() {
    return _underlyingConvention;
  }

  /**
   * Sets the id of the underlying convention.
   * @param underlyingConvention  the new value of the property, not null
   */
  public void setUnderlyingConvention(ExternalId underlyingConvention) {
    JodaBeanUtils.notNull(underlyingConvention, "underlyingConvention");
    this._underlyingConvention = underlyingConvention;
  }

  /**
   * Gets the the {@code underlyingConvention} property.
   * @return the property, not null
   */
  public final Property<ExternalId> underlyingConvention() {
    return metaBean().underlyingConvention().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the start tenor.
   * @return the value of the property, not null
   */
  public Tenor getStartTenor() {
    return _startTenor;
  }

  /**
   * Sets the start tenor.
   * @param startTenor  the new value of the property, not null
   */
  public void setStartTenor(Tenor startTenor) {
    JodaBeanUtils.notNull(startTenor, "startTenor");
    this._startTenor = startTenor;
  }

  /**
   * Gets the the {@code startTenor} property.
   * @return the property, not null
   */
  public final Property<Tenor> startTenor() {
    return metaBean().startTenor().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the end tenor.
   * @return the value of the property, not null
   */
  public Tenor getEndTenor() {
    return _endTenor;
  }

  /**
   * Sets the end tenor.
   * @param endTenor  the new value of the property, not null
   */
  public void setEndTenor(Tenor endTenor) {
    JodaBeanUtils.notNull(endTenor, "endTenor");
    this._endTenor = endTenor;
  }

  /**
   * Gets the the {@code endTenor} property.
   * @return the property, not null
   */
  public final Property<Tenor> endTenor() {
    return metaBean().endTenor().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ForwardTickerConvention}.
   */
  public static class Meta extends Convention.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code underlyingConvention} property.
     */
    private final MetaProperty<ExternalId> _underlyingConvention = DirectMetaProperty.ofReadWrite(
        this, "underlyingConvention", ForwardTickerConvention.class, ExternalId.class);
    /**
     * The meta-property for the {@code startTenor} property.
     */
    private final MetaProperty<Tenor> _startTenor = DirectMetaProperty.ofReadWrite(
        this, "startTenor", ForwardTickerConvention.class, Tenor.class);
    /**
     * The meta-property for the {@code endTenor} property.
     */
    private final MetaProperty<Tenor> _endTenor = DirectMetaProperty.ofReadWrite(
        this, "endTenor", ForwardTickerConvention.class, Tenor.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "underlyingConvention",
        "startTenor",
        "endTenor");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -268325202:  // underlyingConvention
          return _underlyingConvention;
        case -1583746178:  // startTenor
          return _startTenor;
        case 1714950821:  // endTenor
          return _endTenor;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ForwardTickerConvention> builder() {
      return new DirectBeanBuilder<ForwardTickerConvention>(new ForwardTickerConvention());
    }

    @Override
    public Class<? extends ForwardTickerConvention> beanType() {
      return ForwardTickerConvention.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code underlyingConvention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> underlyingConvention() {
      return _underlyingConvention;
    }

    /**
     * The meta-property for the {@code startTenor} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Tenor> startTenor() {
      return _startTenor;
    }

    /**
     * The meta-property for the {@code endTenor} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Tenor> endTenor() {
      return _endTenor;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
