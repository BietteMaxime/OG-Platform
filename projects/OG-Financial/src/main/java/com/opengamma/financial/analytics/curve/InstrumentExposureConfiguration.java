/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.financial.analytics.curve;

import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.TreeMap;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * 
 */
@BeanDefinition
public class InstrumentExposureConfiguration extends DirectBean implements Serializable {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * Map from the computation target to curve configurations
   */
  @PropertyDefinition(validate = "notNull")
  private Map<CurveConfigurationSpecification, Collection<CurveConfigurationVisitor<Object>>> _configurationsForTargets;


  /* package*/InstrumentExposureConfiguration() {
  }

  public InstrumentExposureConfiguration(final Map<CurveConfigurationSpecification, Collection<CurveConfigurationVisitor<Object>>> configurationsForTargets) {
    setConfigurationsForTargets(new TreeMap<>(configurationsForTargets));
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code InstrumentExposureConfiguration}.
   * @return the meta-bean, not null
   */
  public static InstrumentExposureConfiguration.Meta meta() {
    return InstrumentExposureConfiguration.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(InstrumentExposureConfiguration.Meta.INSTANCE);
  }

  @Override
  public InstrumentExposureConfiguration.Meta metaBean() {
    return InstrumentExposureConfiguration.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -992172522:  // configurationsForTargets
        return getConfigurationsForTargets();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -992172522:  // configurationsForTargets
        setConfigurationsForTargets((Map<CurveConfigurationSpecification, Collection<CurveConfigurationVisitor<Object>>>) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_configurationsForTargets, "configurationsForTargets");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      InstrumentExposureConfiguration other = (InstrumentExposureConfiguration) obj;
      return JodaBeanUtils.equal(getConfigurationsForTargets(), other.getConfigurationsForTargets());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getConfigurationsForTargets());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets map from the computation target to curve configurations
   * @return the value of the property, not null
   */
  public Map<CurveConfigurationSpecification, Collection<CurveConfigurationVisitor<Object>>> getConfigurationsForTargets() {
    return _configurationsForTargets;
  }

  /**
   * Sets map from the computation target to curve configurations
   * @param configurationsForTargets  the new value of the property, not null
   */
  public void setConfigurationsForTargets(Map<CurveConfigurationSpecification, Collection<CurveConfigurationVisitor<Object>>> configurationsForTargets) {
    JodaBeanUtils.notNull(configurationsForTargets, "configurationsForTargets");
    this._configurationsForTargets = configurationsForTargets;
  }

  /**
   * Gets the the {@code configurationsForTargets} property.
   * @return the property, not null
   */
  public final Property<Map<CurveConfigurationSpecification, Collection<CurveConfigurationVisitor<Object>>>> configurationsForTargets() {
    return metaBean().configurationsForTargets().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code InstrumentExposureConfiguration}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code configurationsForTargets} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Map<CurveConfigurationSpecification, Collection<CurveConfigurationVisitor<Object>>>> _configurationsForTargets = DirectMetaProperty.ofReadWrite(
        this, "configurationsForTargets", InstrumentExposureConfiguration.class, (Class) Map.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "configurationsForTargets");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -992172522:  // configurationsForTargets
          return _configurationsForTargets;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends InstrumentExposureConfiguration> builder() {
      return new DirectBeanBuilder<InstrumentExposureConfiguration>(new InstrumentExposureConfiguration());
    }

    @Override
    public Class<? extends InstrumentExposureConfiguration> beanType() {
      return InstrumentExposureConfiguration.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code configurationsForTargets} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Map<CurveConfigurationSpecification, Collection<CurveConfigurationVisitor<Object>>>> configurationsForTargets() {
      return _configurationsForTargets;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
