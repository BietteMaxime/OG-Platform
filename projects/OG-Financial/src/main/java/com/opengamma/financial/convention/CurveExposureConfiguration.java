/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.convention;

import java.io.Serializable;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalIdBundle;
import com.opengamma.id.MutableUniqueIdentifiable;
import com.opengamma.id.UniqueId;
import com.opengamma.util.ArgumentChecker;
/**
 *
 */
@BeanDefinition
public abstract class CurveExposureConfiguration extends DirectBean implements Serializable, MutableUniqueIdentifiable {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The configuration type.
   */
  private static final String CONFIGURATION_TYPE = "Configuration";

  /**
   * The unique id of the configuration.
   */
  @PropertyDefinition
  private UniqueId _uniqueId;

  /**
   * The configuration name.
   */
  @PropertyDefinition(validate = "notNull")
  private String _configurationName;

  /**
   * The bundle of external identifiers for which this configuration applies.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalIdBundle _externalIdBundle = ExternalIdBundle.EMPTY;

  /**
   * The configuration type.
   */
  @PropertyDefinition(validate = "notNull", set = "")
  private final String _configurationType;

  /**
   * For the builder
   */
  public CurveExposureConfiguration() {
    _configurationType = CONFIGURATION_TYPE;
  }

  /**
   * Creates an instance with a configuration type.
   * @configurationType The configuration type, not null
   */
  public CurveExposureConfiguration(final String configurationType) {
    ArgumentChecker.notNull(configurationType, "configuration type");
    _configurationType = configurationType;
  }

  public CurveExposureConfiguration(final String configurationType, final String name, final ExternalIdBundle bundle) {
    this(configurationType);
    setConfigurationName(name);
    setExternalIdBundle(bundle);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CurveExposureConfiguration}.
   * @return the meta-bean, not null
   */
  public static CurveExposureConfiguration.Meta meta() {
    return CurveExposureConfiguration.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(CurveExposureConfiguration.Meta.INSTANCE);
  }

  @Override
  public CurveExposureConfiguration.Meta metaBean() {
    return CurveExposureConfiguration.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -294460212:  // uniqueId
        return getUniqueId();
      case 302577825:  // configurationName
        return getConfigurationName();
      case -736922008:  // externalIdBundle
        return getExternalIdBundle();
      case 302779728:  // configurationType
        return getConfigurationType();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -294460212:  // uniqueId
        setUniqueId((UniqueId) newValue);
        return;
      case 302577825:  // configurationName
        setConfigurationName((String) newValue);
        return;
      case -736922008:  // externalIdBundle
        setExternalIdBundle((ExternalIdBundle) newValue);
        return;
      case 302779728:  // configurationType
        if (quiet) {
          return;
        }
        throw new UnsupportedOperationException("Property cannot be written: configurationType");
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_configurationName, "configurationName");
    JodaBeanUtils.notNull(_externalIdBundle, "externalIdBundle");
    JodaBeanUtils.notNull(_configurationType, "configurationType");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CurveExposureConfiguration other = (CurveExposureConfiguration) obj;
      return JodaBeanUtils.equal(getUniqueId(), other.getUniqueId()) &&
          JodaBeanUtils.equal(getConfigurationName(), other.getConfigurationName()) &&
          JodaBeanUtils.equal(getExternalIdBundle(), other.getExternalIdBundle()) &&
          JodaBeanUtils.equal(getConfigurationType(), other.getConfigurationType());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getUniqueId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getConfigurationName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getExternalIdBundle());
    hash += hash * 31 + JodaBeanUtils.hashCode(getConfigurationType());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the unique id of the configuration.
   * @return the value of the property
   */
  public UniqueId getUniqueId() {
    return _uniqueId;
  }

  /**
   * Sets the unique id of the configuration.
   * @param uniqueId  the new value of the property
   */
  public void setUniqueId(UniqueId uniqueId) {
    this._uniqueId = uniqueId;
  }

  /**
   * Gets the the {@code uniqueId} property.
   * @return the property, not null
   */
  public final Property<UniqueId> uniqueId() {
    return metaBean().uniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the configuration name.
   * @return the value of the property, not null
   */
  public String getConfigurationName() {
    return _configurationName;
  }

  /**
   * Sets the configuration name.
   * @param configurationName  the new value of the property, not null
   */
  public void setConfigurationName(String configurationName) {
    JodaBeanUtils.notNull(configurationName, "configurationName");
    this._configurationName = configurationName;
  }

  /**
   * Gets the the {@code configurationName} property.
   * @return the property, not null
   */
  public final Property<String> configurationName() {
    return metaBean().configurationName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the bundle of external identifiers for which this configuration applies.
   * @return the value of the property, not null
   */
  public ExternalIdBundle getExternalIdBundle() {
    return _externalIdBundle;
  }

  /**
   * Sets the bundle of external identifiers for which this configuration applies.
   * @param externalIdBundle  the new value of the property, not null
   */
  public void setExternalIdBundle(ExternalIdBundle externalIdBundle) {
    JodaBeanUtils.notNull(externalIdBundle, "externalIdBundle");
    this._externalIdBundle = externalIdBundle;
  }

  /**
   * Gets the the {@code externalIdBundle} property.
   * @return the property, not null
   */
  public final Property<ExternalIdBundle> externalIdBundle() {
    return metaBean().externalIdBundle().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the configuration type.
   * @return the value of the property, not null
   */
  public String getConfigurationType() {
    return _configurationType;
  }

  /**
   * Gets the the {@code configurationType} property.
   * @return the property, not null
   */
  public final Property<String> configurationType() {
    return metaBean().configurationType().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CurveExposureConfiguration}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code uniqueId} property.
     */
    private final MetaProperty<UniqueId> _uniqueId = DirectMetaProperty.ofReadWrite(
        this, "uniqueId", CurveExposureConfiguration.class, UniqueId.class);
    /**
     * The meta-property for the {@code configurationName} property.
     */
    private final MetaProperty<String> _configurationName = DirectMetaProperty.ofReadWrite(
        this, "configurationName", CurveExposureConfiguration.class, String.class);
    /**
     * The meta-property for the {@code externalIdBundle} property.
     */
    private final MetaProperty<ExternalIdBundle> _externalIdBundle = DirectMetaProperty.ofReadWrite(
        this, "externalIdBundle", CurveExposureConfiguration.class, ExternalIdBundle.class);
    /**
     * The meta-property for the {@code configurationType} property.
     */
    private final MetaProperty<String> _configurationType = DirectMetaProperty.ofReadOnly(
        this, "configurationType", CurveExposureConfiguration.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "uniqueId",
        "configurationName",
        "externalIdBundle",
        "configurationType");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -294460212:  // uniqueId
          return _uniqueId;
        case 302577825:  // configurationName
          return _configurationName;
        case -736922008:  // externalIdBundle
          return _externalIdBundle;
        case 302779728:  // configurationType
          return _configurationType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CurveExposureConfiguration> builder() {
      throw new UnsupportedOperationException("CurveExposureConfiguration is an abstract class");
    }

    @Override
    public Class<? extends CurveExposureConfiguration> beanType() {
      return CurveExposureConfiguration.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code uniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueId> uniqueId() {
      return _uniqueId;
    }

    /**
     * The meta-property for the {@code configurationName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> configurationName() {
      return _configurationName;
    }

    /**
     * The meta-property for the {@code externalIdBundle} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalIdBundle> externalIdBundle() {
      return _externalIdBundle;
    }

    /**
     * The meta-property for the {@code configurationType} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> configurationType() {
      return _configurationType;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
