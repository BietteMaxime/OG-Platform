/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.financial.convention;

import java.io.Serializable;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalId;
import com.opengamma.id.MutableUniqueIdentifiable;
import com.opengamma.id.UniqueId;

/**
 * 
 */
@BeanDefinition
public class CurveExposureConfiguration extends DirectBean implements Serializable, MutableUniqueIdentifiable {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The unique id of this configuration
   */
  @PropertyDefinition
  private UniqueId _uniqueId;
  
  /**
   * The name of this configuration.
   */
  @PropertyDefinition(validate = "notNull")
  private String _name;

  /**
   * The id of the curve.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _curve;

  /**
   * The id of the curve calculation configuration.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _curveCalculationConfiguration;

  /**
   * The id of the convention.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _convention;

  CurveExposureConfiguration() {
    super();
  }

  public CurveExposureConfiguration(final String name, final ExternalId curve, final ExternalId curveCalculationConfiguration, final ExternalId convention) {
    setName(name);
    setCurve(curve);
    setCurveCalculationConfiguration(curveCalculationConfiguration);
    setConvention(convention);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CurveExposureConfiguration}.
   * @return the meta-bean, not null
   */
  public static CurveExposureConfiguration.Meta meta() {
    return CurveExposureConfiguration.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(CurveExposureConfiguration.Meta.INSTANCE);
  }

  @Override
  public CurveExposureConfiguration.Meta metaBean() {
    return CurveExposureConfiguration.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -294460212:  // uniqueId
        return getUniqueId();
      case 3373707:  // name
        return getName();
      case 95027439:  // curve
        return getCurve();
      case 364174524:  // curveCalculationConfiguration
        return getCurveCalculationConfiguration();
      case 2039569265:  // convention
        return getConvention();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -294460212:  // uniqueId
        setUniqueId((UniqueId) newValue);
        return;
      case 3373707:  // name
        setName((String) newValue);
        return;
      case 95027439:  // curve
        setCurve((ExternalId) newValue);
        return;
      case 364174524:  // curveCalculationConfiguration
        setCurveCalculationConfiguration((ExternalId) newValue);
        return;
      case 2039569265:  // convention
        setConvention((ExternalId) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_name, "name");
    JodaBeanUtils.notNull(_curve, "curve");
    JodaBeanUtils.notNull(_curveCalculationConfiguration, "curveCalculationConfiguration");
    JodaBeanUtils.notNull(_convention, "convention");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CurveExposureConfiguration other = (CurveExposureConfiguration) obj;
      return JodaBeanUtils.equal(getUniqueId(), other.getUniqueId()) &&
          JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getCurve(), other.getCurve()) &&
          JodaBeanUtils.equal(getCurveCalculationConfiguration(), other.getCurveCalculationConfiguration()) &&
          JodaBeanUtils.equal(getConvention(), other.getConvention());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getUniqueId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCurve());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCurveCalculationConfiguration());
    hash += hash * 31 + JodaBeanUtils.hashCode(getConvention());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the unique id of this configuration
   * @return the value of the property
   */
  public UniqueId getUniqueId() {
    return _uniqueId;
  }

  /**
   * Sets the unique id of this configuration
   * @param uniqueId  the new value of the property
   */
  public void setUniqueId(UniqueId uniqueId) {
    this._uniqueId = uniqueId;
  }

  /**
   * Gets the the {@code uniqueId} property.
   * @return the property, not null
   */
  public final Property<UniqueId> uniqueId() {
    return metaBean().uniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of this configuration.
   * @return the value of the property, not null
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the name of this configuration.
   * @param name  the new value of the property, not null
   */
  public void setName(String name) {
    JodaBeanUtils.notNull(name, "name");
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the id of the curve.
   * @return the value of the property, not null
   */
  public ExternalId getCurve() {
    return _curve;
  }

  /**
   * Sets the id of the curve.
   * @param curve  the new value of the property, not null
   */
  public void setCurve(ExternalId curve) {
    JodaBeanUtils.notNull(curve, "curve");
    this._curve = curve;
  }

  /**
   * Gets the the {@code curve} property.
   * @return the property, not null
   */
  public final Property<ExternalId> curve() {
    return metaBean().curve().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the id of the curve calculation configuration.
   * @return the value of the property, not null
   */
  public ExternalId getCurveCalculationConfiguration() {
    return _curveCalculationConfiguration;
  }

  /**
   * Sets the id of the curve calculation configuration.
   * @param curveCalculationConfiguration  the new value of the property, not null
   */
  public void setCurveCalculationConfiguration(ExternalId curveCalculationConfiguration) {
    JodaBeanUtils.notNull(curveCalculationConfiguration, "curveCalculationConfiguration");
    this._curveCalculationConfiguration = curveCalculationConfiguration;
  }

  /**
   * Gets the the {@code curveCalculationConfiguration} property.
   * @return the property, not null
   */
  public final Property<ExternalId> curveCalculationConfiguration() {
    return metaBean().curveCalculationConfiguration().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the id of the convention.
   * @return the value of the property, not null
   */
  public ExternalId getConvention() {
    return _convention;
  }

  /**
   * Sets the id of the convention.
   * @param convention  the new value of the property, not null
   */
  public void setConvention(ExternalId convention) {
    JodaBeanUtils.notNull(convention, "convention");
    this._convention = convention;
  }

  /**
   * Gets the the {@code convention} property.
   * @return the property, not null
   */
  public final Property<ExternalId> convention() {
    return metaBean().convention().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CurveExposureConfiguration}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code uniqueId} property.
     */
    private final MetaProperty<UniqueId> _uniqueId = DirectMetaProperty.ofReadWrite(
        this, "uniqueId", CurveExposureConfiguration.class, UniqueId.class);
    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", CurveExposureConfiguration.class, String.class);
    /**
     * The meta-property for the {@code curve} property.
     */
    private final MetaProperty<ExternalId> _curve = DirectMetaProperty.ofReadWrite(
        this, "curve", CurveExposureConfiguration.class, ExternalId.class);
    /**
     * The meta-property for the {@code curveCalculationConfiguration} property.
     */
    private final MetaProperty<ExternalId> _curveCalculationConfiguration = DirectMetaProperty.ofReadWrite(
        this, "curveCalculationConfiguration", CurveExposureConfiguration.class, ExternalId.class);
    /**
     * The meta-property for the {@code convention} property.
     */
    private final MetaProperty<ExternalId> _convention = DirectMetaProperty.ofReadWrite(
        this, "convention", CurveExposureConfiguration.class, ExternalId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "uniqueId",
        "name",
        "curve",
        "curveCalculationConfiguration",
        "convention");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -294460212:  // uniqueId
          return _uniqueId;
        case 3373707:  // name
          return _name;
        case 95027439:  // curve
          return _curve;
        case 364174524:  // curveCalculationConfiguration
          return _curveCalculationConfiguration;
        case 2039569265:  // convention
          return _convention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CurveExposureConfiguration> builder() {
      return new DirectBeanBuilder<CurveExposureConfiguration>(new CurveExposureConfiguration());
    }

    @Override
    public Class<? extends CurveExposureConfiguration> beanType() {
      return CurveExposureConfiguration.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code uniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueId> uniqueId() {
      return _uniqueId;
    }

    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code curve} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> curve() {
      return _curve;
    }

    /**
     * The meta-property for the {@code curveCalculationConfiguration} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> curveCalculationConfiguration() {
      return _curveCalculationConfiguration;
    }

    /**
     * The meta-property for the {@code convention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> convention() {
      return _convention;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
