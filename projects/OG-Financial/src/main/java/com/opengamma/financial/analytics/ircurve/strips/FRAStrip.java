/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.analytics.ircurve.strips;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalId;
import com.opengamma.util.time.Tenor;

/**
 *
 */
@BeanDefinition
public class FRAStrip extends CurveStrip {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The fixing start tenor.
   */
  @PropertyDefinition(validate = "notNull")
  private Tenor _fixingStart;

  /**
   * The fixing end tenor.
   */
  @PropertyDefinition(validate = "notNull")
  private Tenor _fixingEnd;

  /**
   * The convention.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _convention;

  /**
   *
   */
  /* package */ FRAStrip() {
    super();
  }

  public FRAStrip(final Tenor fixingStart, final Tenor fixingEnd, final ExternalId convention, final String curveSpecificationName) {
    super(curveSpecificationName);
    setFixingStart(fixingStart);
    setFixingEnd(fixingEnd);
    setConvention(convention);
  }

  @Override
  protected Tenor getResolvedMaturity() {
    return _fixingEnd;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FRAStrip}.
   * @return the meta-bean, not null
   */
  public static FRAStrip.Meta meta() {
    return FRAStrip.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(FRAStrip.Meta.INSTANCE);
  }

  @Override
  public FRAStrip.Meta metaBean() {
    return FRAStrip.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 270958773:  // fixingStart
        return getFixingStart();
      case 871775726:  // fixingEnd
        return getFixingEnd();
      case 2039569265:  // convention
        return getConvention();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 270958773:  // fixingStart
        setFixingStart((Tenor) newValue);
        return;
      case 871775726:  // fixingEnd
        setFixingEnd((Tenor) newValue);
        return;
      case 2039569265:  // convention
        setConvention((ExternalId) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_fixingStart, "fixingStart");
    JodaBeanUtils.notNull(_fixingEnd, "fixingEnd");
    JodaBeanUtils.notNull(_convention, "convention");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FRAStrip other = (FRAStrip) obj;
      return JodaBeanUtils.equal(getFixingStart(), other.getFixingStart()) &&
          JodaBeanUtils.equal(getFixingEnd(), other.getFixingEnd()) &&
          JodaBeanUtils.equal(getConvention(), other.getConvention()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getFixingStart());
    hash += hash * 31 + JodaBeanUtils.hashCode(getFixingEnd());
    hash += hash * 31 + JodaBeanUtils.hashCode(getConvention());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the fixing start tenor.
   * @return the value of the property, not null
   */
  public Tenor getFixingStart() {
    return _fixingStart;
  }

  /**
   * Sets the fixing start tenor.
   * @param fixingStart  the new value of the property, not null
   */
  public void setFixingStart(Tenor fixingStart) {
    JodaBeanUtils.notNull(fixingStart, "fixingStart");
    this._fixingStart = fixingStart;
  }

  /**
   * Gets the the {@code fixingStart} property.
   * @return the property, not null
   */
  public final Property<Tenor> fixingStart() {
    return metaBean().fixingStart().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the fixing end tenor.
   * @return the value of the property, not null
   */
  public Tenor getFixingEnd() {
    return _fixingEnd;
  }

  /**
   * Sets the fixing end tenor.
   * @param fixingEnd  the new value of the property, not null
   */
  public void setFixingEnd(Tenor fixingEnd) {
    JodaBeanUtils.notNull(fixingEnd, "fixingEnd");
    this._fixingEnd = fixingEnd;
  }

  /**
   * Gets the the {@code fixingEnd} property.
   * @return the property, not null
   */
  public final Property<Tenor> fixingEnd() {
    return metaBean().fixingEnd().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the convention.
   * @return the value of the property, not null
   */
  public ExternalId getConvention() {
    return _convention;
  }

  /**
   * Sets the convention.
   * @param convention  the new value of the property, not null
   */
  public void setConvention(ExternalId convention) {
    JodaBeanUtils.notNull(convention, "convention");
    this._convention = convention;
  }

  /**
   * Gets the the {@code convention} property.
   * @return the property, not null
   */
  public final Property<ExternalId> convention() {
    return metaBean().convention().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FRAStrip}.
   */
  public static class Meta extends CurveStrip.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code fixingStart} property.
     */
    private final MetaProperty<Tenor> _fixingStart = DirectMetaProperty.ofReadWrite(
        this, "fixingStart", FRAStrip.class, Tenor.class);
    /**
     * The meta-property for the {@code fixingEnd} property.
     */
    private final MetaProperty<Tenor> _fixingEnd = DirectMetaProperty.ofReadWrite(
        this, "fixingEnd", FRAStrip.class, Tenor.class);
    /**
     * The meta-property for the {@code convention} property.
     */
    private final MetaProperty<ExternalId> _convention = DirectMetaProperty.ofReadWrite(
        this, "convention", FRAStrip.class, ExternalId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "fixingStart",
        "fixingEnd",
        "convention");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 270958773:  // fixingStart
          return _fixingStart;
        case 871775726:  // fixingEnd
          return _fixingEnd;
        case 2039569265:  // convention
          return _convention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FRAStrip> builder() {
      return new DirectBeanBuilder<FRAStrip>(new FRAStrip());
    }

    @Override
    public Class<? extends FRAStrip> beanType() {
      return FRAStrip.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code fixingStart} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Tenor> fixingStart() {
      return _fixingStart;
    }

    /**
     * The meta-property for the {@code fixingEnd} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Tenor> fixingEnd() {
      return _fixingEnd;
    }

    /**
     * The meta-property for the {@code convention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> convention() {
      return _convention;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------

}
