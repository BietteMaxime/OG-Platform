/**
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.core.region.impl;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.AbstractLink;
import com.opengamma.core.region.Region;
import com.opengamma.core.region.RegionLink;
import com.opengamma.id.ExternalId;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.id.ObjectId;
import com.opengamma.id.UniqueId;
import com.opengamma.util.ArgumentChecker;

/**
 * A flexible link between an object and a region.
 * <p>
 * A region link represents a connection from an entity to a region.
 * The connection can be held by an {@code ObjectId} or an {@code ExternalIdBundle}.
 * <p>
 * This class is mutable and not thread-safe.
 * It is intended to be used in the engine via the read-only {@code RegionLink} interface.
 */
@BeanDefinition
public class SimpleRegionLink extends AbstractLink<Region>
    implements RegionLink {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * Obtains an instance from a region, storing the object identifier
   * if possible and the external identifier bundle if not.
   * 
   * @param region  the region to store, not null
   * @return the link with one identifier set, not null
   */
  public static SimpleRegionLink of(Region region) {
    ArgumentChecker.notNull(region, "region");
    SimpleRegionLink link = new SimpleRegionLink();
    if (region.getUniqueId() != null) {
      link.setObjectId(region.getUniqueId().getObjectId());
    } else {
      link.setExternalId(region.getExternalIdBundle());
    }
    return link;
  }

  /**
   * Obtains an instance from a region, storing the external identifier bundle.
   * 
   * @param region  the region to store, not null
   * @return the link with identifier bundle set, not null
   */
  public static SimpleRegionLink ofBundleId(Region region) {
    ArgumentChecker.notNull(region, "region");
    SimpleRegionLink link = new SimpleRegionLink(region.getExternalIdBundle());
    link.setExternalId(region.getExternalIdBundle());
    return link;
  }

  //-------------------------------------------------------------------------
  /**
   * Creates an new instance.
   */
  public SimpleRegionLink() {
    super();
  }

  /**
   * Creates a link from an object identifier.
   * 
   * @param objectId  the object identifier, not null
   */
  public SimpleRegionLink(final ObjectId objectId) {
    super(objectId);
  }

  /**
   * Creates a link from a unique identifier, only storing the object identifier.
   * 
   * @param uniqueId  the unique identifier, not null
   */
  public SimpleRegionLink(final UniqueId uniqueId) {
    super(uniqueId);
  }

  /**
   * Creates a link from an external identifier.
   * 
   * @param externalId  the external identifier, not null
   */
  public SimpleRegionLink(final ExternalId externalId) {
    super(externalId);
  }

  /**
   * Creates a link from an external identifier bundle.
   * 
   * @param bundle  the identifier bundle, not null
   */
  public SimpleRegionLink(final ExternalIdBundle bundle) {
    super(bundle);
  }

  /**
   * Clones the specified link, sharing the target region.
   * 
   * @param linkToClone  the link to clone, not null
   */
  public SimpleRegionLink(RegionLink linkToClone) {
    super();
    setObjectId(linkToClone.getObjectId());
    setExternalId(linkToClone.getExternalId());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SimpleRegionLink}.
   * @return the meta-bean, not null
   */
  public static SimpleRegionLink.Meta meta() {
    return SimpleRegionLink.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(SimpleRegionLink.Meta.INSTANCE);
  }

  @Override
  public SimpleRegionLink.Meta metaBean() {
    return SimpleRegionLink.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SimpleRegionLink}.
   */
  public static class Meta extends AbstractLink.Meta<Region> {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap());

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    public BeanBuilder<? extends SimpleRegionLink> builder() {
      return new DirectBeanBuilder<SimpleRegionLink>(new SimpleRegionLink());
    }

    @Override
    public Class<? extends SimpleRegionLink> beanType() {
      return SimpleRegionLink.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
