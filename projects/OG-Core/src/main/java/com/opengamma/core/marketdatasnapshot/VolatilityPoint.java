/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.core.marketdatasnapshot;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * A key which specifies a point in volatility space
 * @param <X> The type of the x axis data
 * @param <Y> The type of the y axis data
 * @param <Z> The type of the z axis data
 */
@BeanDefinition
public class VolatilityPoint<X, Y, Z> extends DirectBean {

  /**
   * The x axis.
   */
  @PropertyDefinition
  private X _xAxis;
  /**
   * The y axis.
   */
  @PropertyDefinition
  private Y _yAxis;
  /**
   * The z axis.
   */
  @PropertyDefinition
  private Z _zAxis;

  /**
   * Restricted constructor.
   */
  VolatilityPoint() {
    super();
  }

  /**
   * Creates an instance.
   * 
   * @param xAxis the x axis
   * @param yAxis the y axis
   * @param zAxis the z axis
   */
  public VolatilityPoint(final X xAxis, final Y yAxis, final Z zAxis) {
    super();
    _xAxis = xAxis;
    _yAxis = yAxis;
    _zAxis = zAxis;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code VolatilityPoint}.
   * @return the meta-bean, not null
   */
  public static VolatilityPoint.Meta meta() {
    return VolatilityPoint.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(VolatilityPoint.Meta.INSTANCE);
  }

  @Override
  public VolatilityPoint.Meta metaBean() {
    return VolatilityPoint.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(final String propertyName, final boolean quiet) {
    switch (propertyName.hashCode()) {
      case 112877625:  // xAxis
        return getXAxis();
      case 113801146:  // yAxis
        return getYAxis();
      case 114724667:  // zAxis
        return getZAxis();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(final String propertyName, final Object newValue, final boolean quiet) {
    switch (propertyName.hashCode()) {
      case 112877625:  // xAxis
        setXAxis((X) newValue);
        return;
      case 113801146:  // yAxis
        setYAxis((Y) newValue);
        return;
      case 114724667:  // zAxis
        setZAxis((Z) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      final VolatilityPoint other = (VolatilityPoint) obj;
      return JodaBeanUtils.equal(getXAxis(), other.getXAxis()) &&
          JodaBeanUtils.equal(getYAxis(), other.getYAxis()) &&
          JodaBeanUtils.equal(getZAxis(), other.getZAxis());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getXAxis());
    hash += hash * 31 + JodaBeanUtils.hashCode(getYAxis());
    hash += hash * 31 + JodaBeanUtils.hashCode(getZAxis());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the x axis.
   * @return the value of the property
   */
  public X getXAxis() {
    return _xAxis;
  }

  /**
   * Sets the x axis.
   * @param xAxis  the new value of the property
   */
  public void setXAxis(final X xAxis) {
    this._xAxis = xAxis;
  }

  /**
   * Gets the the {@code xAxis} property.
   * @return the property, not null
   */
  public final Property<X> xAxis() {
    return (Property<X>) metaBean().xAxis().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the y axis.
   * @return the value of the property
   */
  public Y getYAxis() {
    return _yAxis;
  }

  /**
   * Sets the y axis.
   * @param yAxis  the new value of the property
   */
  public void setYAxis(final Y yAxis) {
    this._yAxis = yAxis;
  }

  /**
   * Gets the the {@code yAxis} property.
   * @return the property, not null
   */
  public final Property<Y> yAxis() {
    return (Property<Y>) metaBean().yAxis().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the z axis.
   * @return the value of the property
   */
  public Z getZAxis() {
    return _zAxis;
  }

  /**
   * Sets the z axis.
   * @param zAxis  the new value of the property
   */
  public void setZAxis(final Z zAxis) {
    this._zAxis = zAxis;
  }

  /**
   * Gets the the {@code zAxis} property.
   * @return the property, not null
   */
  public final Property<Z> zAxis() {
    return (Property<Z>) metaBean().zAxis().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code VolatilityPoint}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code xAxis} property.
     */
    private final MetaProperty<Object> _xAxis = DirectMetaProperty.ofReadWrite(
        this, "xAxis", VolatilityPoint.class, Object.class);
    /**
     * The meta-property for the {@code yAxis} property.
     */
    private final MetaProperty<Object> _yAxis = DirectMetaProperty.ofReadWrite(
        this, "yAxis", VolatilityPoint.class, Object.class);
    /**
     * The meta-property for the {@code zAxis} property.
     */
    private final MetaProperty<Object> _zAxis = DirectMetaProperty.ofReadWrite(
        this, "zAxis", VolatilityPoint.class, Object.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "xAxis",
        "yAxis",
        "zAxis");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(final String propertyName) {
      switch (propertyName.hashCode()) {
        case 112877625:  // xAxis
          return _xAxis;
        case 113801146:  // yAxis
          return _yAxis;
        case 114724667:  // zAxis
          return _zAxis;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends VolatilityPoint> builder() {
      return new DirectBeanBuilder<VolatilityPoint>(new VolatilityPoint());
    }

    @Override
    public Class<? extends VolatilityPoint> beanType() {
      return VolatilityPoint.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code xAxis} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Object> xAxis() {
      return _xAxis;
    }

    /**
     * The meta-property for the {@code yAxis} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Object> yAxis() {
      return _yAxis;
    }

    /**
     * The meta-property for the {@code zAxis} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Object> zAxis() {
      return _zAxis;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
