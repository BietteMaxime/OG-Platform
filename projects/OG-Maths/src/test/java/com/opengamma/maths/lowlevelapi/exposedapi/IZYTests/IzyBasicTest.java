/**
 * Copyright () 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.maths.lowlevelapi.exposedapi.IZYTests;

import static org.testng.Assert.assertTrue;

import org.testng.annotations.Test;

import com.opengamma.maths.commonapi.exceptions.MathsExceptionNotImplemented;
import com.opengamma.maths.lowlevelapi.exposedapi.IZY;
import com.opengamma.maths.lowlevelapi.functions.FPEquals;

/**
 * Test harness for izy implementations
 */
@Test
public class IzyBasicTest {

  private IZY _izy;

  /**
   * Say which izy is going to be tested
   */
  public IzyBasicTest(IZY.backing back) {
    _izy = new IZY(back);
  }


  int[] zero = new int[] {0 };

  @Test
  public void vd_acos() {
    double[] a = new double[] {-0.99, -0.77, -0.55, -0.33, -0.11, 0.11, 0.33, 0.55, 0.77, 0.99 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {3.000053180265366, 2.449637478463476, 2.153160564663640, 1.907099901948877, 1.681019376782643, 1.460573276807150, 1.234492751640916, 0.988432088926153,
        0.691955175126317, 0.141539473324427 };
    int[] n = new int[] {a.length };
    _izy.vd_acos(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_asin() {
    double[] a = new double[] {-0.99, -0.77, -0.55, -0.33, -0.11, 0.11, 0.33, 0.55, 0.77, 0.99 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-1.429256853470469, -0.878841151668580, -0.582364237868743, -0.336303575153980, -0.110223049987747, 0.110223049987747, 0.336303575153980, 0.582364237868743,
        0.878841151668580, 1.429256853470469 };
    int[] n = new int[] {a.length };
    _izy.vd_asin(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_atan() {
    double[] a = new double[] {-0.99, -0.77, -0.55, -0.33, -0.11, 0.11, 0.33, 0.55, 0.77, 0.99 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-0.780373080066636, -0.656178717991395, -0.502843210927861, -0.318747560420644, -0.109559526773944, 0.109559526773944, 0.318747560420645, 0.502843210927861,
        0.656178717991395, 0.780373080066636 };
    int[] n = new int[] {a.length };
    _izy.vd_atan(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_atan2() {
    double[] a = new double[] {-0.990000000000000, -0.770000000000000, -0.550000000000000, -0.330000000000000, -0.110000000000000, 0.110000000000000, 0.330000000000000, 0.550000000000000,
        0.770000000000000, 0.990000000000000 };
    double[] b = new double[] {0.770000000000000, 0.550000000000000, 0.110000000000000, -0.110000000000000, -0.770000000000000, -0.330000000000000, 0.990000000000000, -0.550000000000000,
        -0.990000000000000, 0.330000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-0.909753157944210, -0.950546840812075, -1.373400766945016, -1.892546881191539, -2.999695598985630, 2.819842099193151, 0.321750554396642, 2.356194490192345,
        2.480549484739107, 1.249045772398254 };
    int[] n = new int[] {a.length };
    _izy.vd_atan2(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_cos() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.999449418224499, 0.283662185463226, -0.820559357339561, -0.801143615546934, 0.315322362395269, 1.000000000000000, 0.315322362395269, -0.801143615546934,
        -0.820559357339561, 0.283662185463226, 0.999449418224499 };
    int[] n = new int[] {a.length };
    _izy.vd_cos(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_sin() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.033179216547557, 0.958924274663138, 0.571561318742344, -0.598472144103957, -0.948984619355586, 0.000000000000000, 0.948984619355586, 0.598472144103957,
        -0.571561318742344, -0.958924274663138, -0.033179216547557 };
    int[] n = new int[] {a.length };
    _izy.vd_sin(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_sincos() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y1 = new double[a.length];
    double[] y2 = new double[a.length];
    double[] y_expected1 = new double[] {0.033179216547557, 0.958924274663138, 0.571561318742344, -0.598472144103957, -0.948984619355586, 0.000000000000000, 0.948984619355586, 0.598472144103957,
        -0.571561318742344, -0.958924274663138, -0.033179216547557 };
    double[] y_expected2 = new double[] {0.999449418224499, 0.283662185463226, -0.820559357339561, -0.801143615546934, 0.315322362395269, 1.000000000000000, 0.315322362395269, -0.801143615546934,
        -0.820559357339561, 0.283662185463226, 0.999449418224499 };
    int[] n = new int[] {a.length };
    _izy.vd_sincos(n, a, zero, y1, zero, y2, zero);
    assertTrue(FPEquals.fuzzyEquals(y1, y_expected1));
    assertTrue(FPEquals.fuzzyEquals(y2, y_expected2));
  }

  @Test
  public void vd_tan() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.033197494483011, 3.380515006246586, -0.696550851111460, 0.747022297238660, -3.009569673862831, 0.000000000000000, 3.009569673862831, -0.747022297238660,
        0.696550851111460, -3.380515006246586, -0.033197494483011 };
    int[] n = new int[] {a.length };
    _izy.vd_tan(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_acosh() {
    double[] a = new double[] {1.010000000000000, 2.008888888888889, 3.007777777777778, 4.006666666666667, 5.005555555555556, 6.004444444444444, 7.003333333333334, 8.002222222222223,
        9.001111111111111, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.141303769485649, 1.322074760601641, 1.765493031742621, 2.065156866627155, 2.293565036842955, 2.478639692472398, 2.634396802172069, 2.768939317502312,
        2.887395168592897, 2.993222846126381 };
    int[] n = new int[] {a.length };
    _izy.vd_acosh(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_asinh() {
    double[] a = new double[] {-10.000000000000000, -7.777777777777778, -5.555555555555555, -3.333333333333333, -1.111111111111111, 1.111111111111111, 3.333333333333334, 5.555555555555557,
        7.777777777777779, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-2.998222950297970, -2.748525112849545, -2.415948928313460, -1.918896472098531, -0.957800449200672, 0.957800449200672, 1.918896472098531, 2.415948928313460,
        2.748525112849545, 2.998222950297970 };
    int[] n = new int[] {a.length };
    _izy.vd_asinh(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_atanh() {
    double[] a = new double[] {-0.990000000000000, -0.770000000000000, -0.550000000000000, -0.330000000000000, -0.110000000000000, 0.110000000000000, 0.330000000000000, 0.550000000000000,
        0.770000000000000, 0.990000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-2.646652412362246, -1.020327758322340, -0.618381313574464, -0.342828254415394, -0.110446915790097, 0.110446915790097, 0.342828254415394, 0.618381313574464,
        1.020327758322340, 2.646652412362246 };
    int[] n = new int[] {a.length };
    _izy.vd_atanh(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_cosh() {
    double[] a = new double[] {-10.000000000000000, -7.777777777777778, -5.555555555555555, -3.333333333333333, -1.111111111111111, 1.111111111111111, 3.333333333333334, 5.555555555555557,
        7.777777777777779, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {11013.232920103324432, 1193.482487845016294, 129.337248217819621, 14.033649443936689, 1.683462382662694, 1.683462382662694, 14.033649443936701,
        129.337248217819848, 1193.482487845017431, 11013.232920103324432 };
    int[] n = new int[] {a.length };
    _izy.vd_cosh(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEqualsDynamicTol(y, y_expected));
  }

  @Test
  public void vd_sinh() {
    double[] a = new double[] {-10.000000000000000, -7.777777777777778, -5.555555555555555, -3.333333333333333, -1.111111111111111, 1.111111111111111, 3.333333333333334, 5.555555555555557,
        7.777777777777779, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-11013.232874703393463, -1193.482068902892934, -129.333382297680174, -13.997975450589436, -1.354269394854788, 1.354269394854788, 13.997975450589449,
        129.333382297680402, 1193.482068902893843, 11013.232874703393463 };
    int[] n = new int[] {a.length };
    _izy.vd_sinh(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_tanh() {
    double[] a = new double[] {-10.000000000000000, -7.777777777777778, -5.555555555555555, -3.333333333333333, -1.111111111111111, 1.111111111111111, 3.333333333333334, 5.555555555555557,
        7.777777777777779, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-0.999999995877693, -0.999999648975056, -0.999970109769670, -0.997457967473837, -0.804454800298401, 0.804454800298401, 0.997457967473837, 0.999970109769670,
        0.999999648975056, 0.999999995877693 };
    int[] n = new int[] {a.length };
    _izy.vd_tanh(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_cbrt() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-2.154434690031883, -2.117911792127447, -2.080083823051904, -2.040827550958674, -2.000000000000000, -1.957433820584432, -1.912931182772389, -1.866255578408624,
        -1.817120592832139, -1.765174167663032, -1.709975946676697, -1.650963624447313, -1.587401051968200, -1.518294485937832, -1.442249570307408, -1.357208808297453, -1.259921049894873,
        -1.144714242553332, -1.000000000000000, -0.793700525984100, 0.793700525984100, 1.000000000000000, 1.144714242553332, 1.259921049894873, 1.357208808297453, 1.442249570307408,
        1.518294485937832, 1.587401051968200, 1.650963624447313, 1.709975946676697, 1.765174167663032, 1.817120592832139, 1.866255578408624, 1.912931182772389, 1.957433820584432, 2.000000000000000,
        2.040827550958674, 2.080083823051904, 2.117911792127447, 2.154434690031883 };
    int[] n = new int[] {a.length };
    _izy.vd_cbrt(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_hypot() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] b = new double[] {-100.000000000000000, -95.000000000000000, -90.000000000000000, -85.000000000000000, -80.000000000000000, -75.000000000000000, -70.000000000000000, -65.000000000000000,
        -60.000000000000000, -55.000000000000000, -50.000000000000000, -45.000000000000000, -40.000000000000000, -35.000000000000000, -30.000000000000000, -25.000000000000000, -20.000000000000000,
        -15.000000000000000, -10.000000000000000, -5.000000000000000, 5.000000000000000, 10.000000000000000, 15.000000000000000, 20.000000000000000, 25.000000000000000, 30.000000000000000,
        35.000000000000000, 40.000000000000000, 45.000000000000000, 50.000000000000000, 55.000000000000000, 60.000000000000000, 65.000000000000000, 70.000000000000000, 75.000000000000000,
        80.000000000000000, 85.000000000000000, 90.000000000000000, 95.000000000000000, 100.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {100.498756211208899, 95.473818400648454, 90.448880590088010, 85.423942779527565, 80.399004968967120, 75.374067158406675, 70.349129347846230,
        65.324191537285785, 60.299253726725340, 55.274315916164895, 50.249378105604450, 45.224440295044005, 40.199502484483560, 35.174564673923115, 30.149626863362670, 25.124689052802225,
        20.099751242241780, 15.074813431681335, 10.049875621120890, 5.024937810560445, 5.024937810560445, 10.049875621120890, 15.074813431681335, 20.099751242241780, 25.124689052802225,
        30.149626863362670, 35.174564673923115, 40.199502484483560, 45.224440295044005, 50.249378105604450, 55.274315916164895, 60.299253726725340, 65.324191537285785, 70.349129347846230,
        75.374067158406675, 80.399004968967120, 85.423942779527565, 90.448880590088010, 95.473818400648454, 100.498756211208899 };
    int[] n = new int[] {a.length };
    _izy.vd_hypot(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_inv() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-0.100000000000000, -0.105263157894737, -0.111111111111111, -0.117647058823529, -0.125000000000000, -0.133333333333333, -0.142857142857143, -0.153846153846154,
        -0.166666666666667, -0.181818181818182, -0.200000000000000, -0.222222222222222, -0.250000000000000, -0.285714285714286, -0.333333333333333, -0.400000000000000, -0.500000000000000,
        -0.666666666666667, -1.000000000000000, -2.000000000000000, 2.000000000000000, 1.000000000000000, 0.666666666666667, 0.500000000000000, 0.400000000000000, 0.333333333333333,
        0.285714285714286, 0.250000000000000, 0.222222222222222, 0.200000000000000, 0.181818181818182, 0.166666666666667, 0.153846153846154, 0.142857142857143, 0.133333333333333, 0.125000000000000,
        0.117647058823529, 0.111111111111111, 0.105263157894737, 0.100000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_inv(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_invcbrt() {
    double[] a = new double[] { 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {1.259921049894873, 1.000000000000000, 0.873580464736299, 0.793700525984100, 0.736806299728077, 0.693361274350635,
        0.658633756008349, 0.629960524947436, 0.605706864277380, 0.584803547642573, 0.566516334942705, 0.550321208149104, 0.535832289837124, 0.522757958574710, 0.510872954929035, 0.500000000000000,
        0.489997305029645, 0.480749856769136, 0.472163195708683, 0.464158883361278 };
    int[] n = new int[] {a.length };
    _izy.vd_invcbrt(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_invsqrt() {
    double[] a = new double[] { 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] { 1.414213562373095, 1.000000000000000, 0.816496580927726, 0.707106781186547, 0.632455532033676, 0.577350269189626, 0.534522483824849, 0.500000000000000,
        0.471404520791032, 0.447213595499958, 0.426401432711221, 0.408248290463863, 0.392232270276368, 0.377964473009227, 0.365148371670111, 0.353553390593274, 0.342997170285018, 0.333333333333333,
        0.324442842261525, 0.316227766016838 };
    int[] n = new int[] {a.length };
    _izy.vd_invsqrt(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_pow() {
    double[] a = new double[] { 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] b = new double[] {0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.707106781186548, 1.000000000000000, 1.837117307087384, 4.000000000000000, 9.882117688026186, 27.000000000000000,
        80.211780228966362, 256.000000000000000, 869.873923380925930, 3125.000000000000000, 11803.064820864423382, 46656.000000000000000, 192281.197495197469834, 823543.000000000000000,
        3655606.790966181084514, 16777216.000000000000000, 79443957.165195614099503, 387420489.000000000000000, 1942559143.334656953811646, 10000000000.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_pow(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEqualsDynamicTol(y, y_expected));
  }

  @Test
  public void vd_powx() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] b = new double[] {10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {10000000000.000000000000000, 5987369392.383789062500000, 3486784401.000000000000000, 1968744043.407226562500000, 1073741824.000000000000000,
        563135147.094726562500000, 282475249.000000000000000, 134627433.446289062500000, 60466176.000000000000000, 25329516.211914062500000, 9765625.000000000000000, 3405062.891601562500000,
        1048576.000000000000000, 275854.735351562500000, 59049.000000000000000, 9536.743164062500000, 1024.000000000000000, 57.665039062500000, 1.000000000000000, 0.000976562500000,
        0.000976562500000, 1.000000000000000, 57.665039062500000, 1024.000000000000000, 9536.743164062500000, 59049.000000000000000, 275854.735351562500000, 1048576.000000000000000,
        3405062.891601562500000, 9765625.000000000000000, 25329516.211914062500000, 60466176.000000000000000, 134627433.446289062500000, 282475249.000000000000000, 563135147.094726562500000,
        1073741824.000000000000000, 1968744043.407226562500000, 3486784401.000000000000000, 5987369392.383789062500000, 10000000000.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_powx(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_pow2o3() {
    double[] a = new double[] {0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000, 10.500000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.629960524947437, 1.000000000000000, 1.310370697104448, 1.587401051968199, 1.842015749320193, 2.080083823051904, 2.305218146029223, 2.519842099789746,
        2.725680889248209, 2.924017738212866, 3.115839842184876, 3.301927248894626, 3.482909883941308, 3.659305710022971, 3.831547161967765, 4.000000000000000, 4.164977092751979, 4.326748710922224,
        4.485550359232493, 4.641588833612778, 4.795046974161089 };
    int[] n = new int[] {a.length };
    _izy.vd_pow2o3(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_pow3o2() {
    double[] a = new double[] {0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000, 10.500000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.353553390593274, 1.000000000000000, 1.837117307087384, 2.828427124746190, 3.952847075210474, 5.196152422706632, 6.547900426854397, 8.000000000000000,
        9.545941546018392, 11.180339887498949, 12.898643339514431, 14.696938456699069, 16.571813419176550, 18.520259177452136, 20.539595906443729, 22.627416997969522, 24.781545553092528,
        27.000000000000000, 29.280966514102637, 31.622776601683793, 34.023888666641270 };
    int[] n = new int[] {a.length };
    _izy.vd_pow3o2(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_sqrt() {
    double[] a = new double[] {0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000, 10.500000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.707106781186548, 1.000000000000000, 1.224744871391589, 1.414213562373095, 1.581138830084190, 1.732050807568877, 1.870828693386971, 2.000000000000000,
        2.121320343559642, 2.236067977499790, 2.345207879911715, 2.449489742783178, 2.549509756796392, 2.645751311064591, 2.738612787525831, 2.828427124746190, 2.915475947422650, 3.000000000000000,
        3.082207001484488, 3.162277660168380, 3.240370349203930 };
    int[] n = new int[] {a.length };
    _izy.vd_sqrt(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_exp() {
    double[] a = new double[] {0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000, 10.500000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {1.648721270700128, 2.718281828459045, 4.481689070338065, 7.389056098930650, 12.182493960703473, 20.085536923187668, 33.115451958692312, 54.598150033144236,
        90.017131300521811, 148.413159102576600, 244.691932264220384, 403.428793492735110, 665.141633044361811, 1096.633158428458501, 1808.042414456063170, 2980.957987041728302, 4914.768840299134354,
        8103.083927575384223, 13359.726829661873126, 22026.465794806717895, 36315.502674246636161 };
    int[] n = new int[] {a.length };
    _izy.vd_exp(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEqualsDynamicTol(y, y_expected));
  }

  @Test
  public void vd_expm1() {
    double[] a = new double[] {0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000, 10.500000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.648721270700128, 1.718281828459045, 3.481689070338065, 6.389056098930650, 11.182493960703473, 19.085536923187668, 32.115451958692312, 53.598150033144236,
        89.017131300521811, 147.413159102576600, 243.691932264220384, 402.428793492735110, 664.141633044361811, 1095.633158428458501, 1807.042414456063170, 2979.957987041728302, 4913.768840299134354,
        8102.083927575384223, 13358.726829661871307, 22025.465794806717895, 36314.502674246636161 };
    int[] n = new int[] {a.length };
    _izy.vd_expm1(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_ln() {
    double[] a = new double[] {0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000, 10.500000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-0.693147180559945, 0.000000000000000, 0.405465108108164, 0.693147180559945, 0.916290731874155, 1.098612288668110, 1.252762968495368, 1.386294361119891,
        1.504077396776274, 1.609437912434100, 1.704748092238425, 1.791759469228055, 1.871802176901591, 1.945910149055313, 2.014903020542265, 2.079441541679836, 2.140066163496271, 2.197224577336220,
        2.251291798606495, 2.302585092994046, 2.351375257163478 };
    int[] n = new int[] {a.length };
    _izy.vd_ln(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_log10() {
    double[] a = new double[] {0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000, 10.500000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-0.301029995663981, 0.000000000000000, 0.176091259055681, 0.301029995663981, 0.397940008672038, 0.477121254719662, 0.544068044350276, 0.602059991327962,
        0.653212513775344, 0.698970004336019, 0.740362689494244, 0.778151250383644, 0.812913356642856, 0.845098040014257, 0.875061263391700, 0.903089986991944, 0.929418925714293, 0.954242509439325,
        0.977723605288848, 1.000000000000000, 1.021189299069938 };
    int[] n = new int[] {a.length };
    _izy.vd_log10(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_log1p() {
    double[] a = new double[] {0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000, 10.500000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.405465108108164, 0.693147180559945, 0.916290731874155, 1.098612288668110, 1.252762968495368, 1.386294361119891, 1.504077396776274, 1.609437912434100,
        1.704748092238425, 1.791759469228055, 1.871802176901591, 1.945910149055313, 2.014903020542265, 2.079441541679836, 2.140066163496271, 2.197224577336220, 2.251291798606495, 2.302585092994046,
        2.351375257163478, 2.397895272798371, 2.442347035369204 };
    int[] n = new int[] {a.length };
    _izy.vd_log1p(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_abs() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {10.000000000000000, 9.500000000000000, 9.000000000000000, 8.500000000000000, 8.000000000000000, 7.500000000000000, 7.000000000000000, 6.500000000000000,
        6.000000000000000, 5.500000000000000, 5.000000000000000, 4.500000000000000, 4.000000000000000, 3.500000000000000, 3.000000000000000, 2.500000000000000, 2.000000000000000, 1.500000000000000,
        1.000000000000000, 0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_abs(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_add() {
    double[] a = new double[] {-100.000000000000000, -95.000000000000000, -90.000000000000000, -85.000000000000000, -80.000000000000000, -75.000000000000000, -70.000000000000000, -65.000000000000000,
        -60.000000000000000, -55.000000000000000, -50.000000000000000, -45.000000000000000, -40.000000000000000, -35.000000000000000, -30.000000000000000, -25.000000000000000, -20.000000000000000,
        -15.000000000000000, -10.000000000000000, -5.000000000000000, 5.000000000000000, 10.000000000000000, 15.000000000000000, 20.000000000000000, 25.000000000000000, 30.000000000000000,
        35.000000000000000, 40.000000000000000, 45.000000000000000, 50.000000000000000, 55.000000000000000, 60.000000000000000, 65.000000000000000, 70.000000000000000, 75.000000000000000,
        80.000000000000000, 85.000000000000000, 90.000000000000000, 95.000000000000000, 100.000000000000000 };
    double[] b = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-110.000000000000000, -104.500000000000000, -99.000000000000000, -93.500000000000000, -88.000000000000000, -82.500000000000000, -77.000000000000000,
        -71.500000000000000, -66.000000000000000, -60.500000000000000, -55.000000000000000, -49.500000000000000, -44.000000000000000, -38.500000000000000, -33.000000000000000, -27.500000000000000,
        -22.000000000000000, -16.500000000000000, -11.000000000000000, -5.500000000000000, 5.500000000000000, 11.000000000000000, 16.500000000000000, 22.000000000000000, 27.500000000000000,
        33.000000000000000, 38.500000000000000, 44.000000000000000, 49.500000000000000, 55.000000000000000, 60.500000000000000, 66.000000000000000, 71.500000000000000, 77.000000000000000,
        82.500000000000000, 88.000000000000000, 93.500000000000000, 99.000000000000000, 104.500000000000000, 110.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_add(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_addx() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] b = new double[] {10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.000000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000,
        4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000,
        9.000000000000000, 9.500000000000000, 10.500000000000000, 11.000000000000000, 11.500000000000000, 12.000000000000000, 12.500000000000000, 13.000000000000000, 13.500000000000000,
        14.000000000000000, 14.500000000000000, 15.000000000000000, 15.500000000000000, 16.000000000000000, 16.500000000000000, 17.000000000000000, 17.500000000000000, 18.000000000000000,
        18.500000000000000, 19.000000000000000, 19.500000000000000, 20.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_addx(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_div() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] b = new double[] {-100.000000000000000, -95.000000000000000, -90.000000000000000, -85.000000000000000, -80.000000000000000, -75.000000000000000, -70.000000000000000, -65.000000000000000,
        -60.000000000000000, -55.000000000000000, -50.000000000000000, -45.000000000000000, -40.000000000000000, -35.000000000000000, -30.000000000000000, -25.000000000000000, -20.000000000000000,
        -15.000000000000000, -10.000000000000000, -5.000000000000000, 5.000000000000000, 10.000000000000000, 15.000000000000000, 20.000000000000000, 25.000000000000000, 30.000000000000000,
        35.000000000000000, 40.000000000000000, 45.000000000000000, 50.000000000000000, 55.000000000000000, 60.000000000000000, 65.000000000000000, 70.000000000000000, 75.000000000000000,
        80.000000000000000, 85.000000000000000, 90.000000000000000, 95.000000000000000, 100.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000,
        0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000,
        0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000,
        0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000, 0.100000000000000,
        0.100000000000000, 0.100000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_div(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_divx() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] b = new double[] {10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-1.000000000000000, -0.950000000000000, -0.900000000000000, -0.850000000000000, -0.800000000000000, -0.750000000000000, -0.700000000000000, -0.650000000000000,
        -0.600000000000000, -0.550000000000000, -0.500000000000000, -0.450000000000000, -0.400000000000000, -0.350000000000000, -0.300000000000000, -0.250000000000000, -0.200000000000000,
        -0.150000000000000, -0.100000000000000, -0.050000000000000, 0.050000000000000, 0.100000000000000, 0.150000000000000, 0.200000000000000, 0.250000000000000, 0.300000000000000,
        0.350000000000000, 0.400000000000000, 0.450000000000000, 0.500000000000000, 0.550000000000000, 0.600000000000000, 0.650000000000000, 0.700000000000000, 0.750000000000000, 0.800000000000000,
        0.850000000000000, 0.900000000000000, 0.950000000000000, 1.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_divx(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_mul() {
    double[] a = new double[] {-100.000000000000000, -95.000000000000000, -90.000000000000000, -85.000000000000000, -80.000000000000000, -75.000000000000000, -70.000000000000000, -65.000000000000000,
        -60.000000000000000, -55.000000000000000, -50.000000000000000, -45.000000000000000, -40.000000000000000, -35.000000000000000, -30.000000000000000, -25.000000000000000, -20.000000000000000,
        -15.000000000000000, -10.000000000000000, -5.000000000000000, 5.000000000000000, 10.000000000000000, 15.000000000000000, 20.000000000000000, 25.000000000000000, 30.000000000000000,
        35.000000000000000, 40.000000000000000, 45.000000000000000, 50.000000000000000, 55.000000000000000, 60.000000000000000, 65.000000000000000, 70.000000000000000, 75.000000000000000,
        80.000000000000000, 85.000000000000000, 90.000000000000000, 95.000000000000000, 100.000000000000000 };
    double[] b = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {1000.000000000000000, 902.500000000000000, 810.000000000000000, 722.500000000000000, 640.000000000000000, 562.500000000000000, 490.000000000000000,
        422.500000000000000, 360.000000000000000, 302.500000000000000, 250.000000000000000, 202.500000000000000, 160.000000000000000, 122.500000000000000, 90.000000000000000, 62.500000000000000,
        40.000000000000000, 22.500000000000000, 10.000000000000000, 2.500000000000000, 2.500000000000000, 10.000000000000000, 22.500000000000000, 40.000000000000000, 62.500000000000000,
        90.000000000000000, 122.500000000000000, 160.000000000000000, 202.500000000000000, 250.000000000000000, 302.500000000000000, 360.000000000000000, 422.500000000000000, 490.000000000000000,
        562.500000000000000, 640.000000000000000, 722.500000000000000, 810.000000000000000, 902.500000000000000, 1000.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_mul(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_mulx() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] b = new double[] {10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-100.000000000000000, -95.000000000000000, -90.000000000000000, -85.000000000000000, -80.000000000000000, -75.000000000000000, -70.000000000000000,
        -65.000000000000000, -60.000000000000000, -55.000000000000000, -50.000000000000000, -45.000000000000000, -40.000000000000000, -35.000000000000000, -30.000000000000000, -25.000000000000000,
        -20.000000000000000, -15.000000000000000, -10.000000000000000, -5.000000000000000, 5.000000000000000, 10.000000000000000, 15.000000000000000, 20.000000000000000, 25.000000000000000,
        30.000000000000000, 35.000000000000000, 40.000000000000000, 45.000000000000000, 50.000000000000000, 55.000000000000000, 60.000000000000000, 65.000000000000000, 70.000000000000000,
        75.000000000000000, 80.000000000000000, 85.000000000000000, 90.000000000000000, 95.000000000000000, 100.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_mulx(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_sqr() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {100.000000000000000, 90.250000000000000, 81.000000000000000, 72.250000000000000, 64.000000000000000, 56.250000000000000, 49.000000000000000,
        42.250000000000000, 36.000000000000000, 30.250000000000000, 25.000000000000000, 20.250000000000000, 16.000000000000000, 12.250000000000000, 9.000000000000000, 6.250000000000000,
        4.000000000000000, 2.250000000000000, 1.000000000000000, 0.250000000000000, 0.250000000000000, 1.000000000000000, 2.250000000000000, 4.000000000000000, 6.250000000000000, 9.000000000000000,
        12.250000000000000, 16.000000000000000, 20.250000000000000, 25.000000000000000, 30.250000000000000, 36.000000000000000, 42.250000000000000, 49.000000000000000, 56.250000000000000,
        64.000000000000000, 72.250000000000000, 81.000000000000000, 90.250000000000000, 100.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_sqr(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_sub() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] b = new double[] {-100.000000000000000, -95.000000000000000, -90.000000000000000, -85.000000000000000, -80.000000000000000, -75.000000000000000, -70.000000000000000, -65.000000000000000,
        -60.000000000000000, -55.000000000000000, -50.000000000000000, -45.000000000000000, -40.000000000000000, -35.000000000000000, -30.000000000000000, -25.000000000000000, -20.000000000000000,
        -15.000000000000000, -10.000000000000000, -5.000000000000000, 5.000000000000000, 10.000000000000000, 15.000000000000000, 20.000000000000000, 25.000000000000000, 30.000000000000000,
        35.000000000000000, 40.000000000000000, 45.000000000000000, 50.000000000000000, 55.000000000000000, 60.000000000000000, 65.000000000000000, 70.000000000000000, 75.000000000000000,
        80.000000000000000, 85.000000000000000, 90.000000000000000, 95.000000000000000, 100.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {90.000000000000000, 85.500000000000000, 81.000000000000000, 76.500000000000000, 72.000000000000000, 67.500000000000000, 63.000000000000000, 58.500000000000000,
        54.000000000000000, 49.500000000000000, 45.000000000000000, 40.500000000000000, 36.000000000000000, 31.500000000000000, 27.000000000000000, 22.500000000000000, 18.000000000000000,
        13.500000000000000, 9.000000000000000, 4.500000000000000, -4.500000000000000, -9.000000000000000, -13.500000000000000, -18.000000000000000, -22.500000000000000, -27.000000000000000,
        -31.500000000000000, -36.000000000000000, -40.500000000000000, -45.000000000000000, -49.500000000000000, -54.000000000000000, -58.500000000000000, -63.000000000000000, -67.500000000000000,
        -72.000000000000000, -76.500000000000000, -81.000000000000000, -85.500000000000000, -90.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_sub(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_subx() {
    double[] a = new double[] {-10.000000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000, -7.000000000000000, -6.500000000000000,
        -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000, -2.500000000000000, -2.000000000000000,
        -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000,
        3.500000000000000, 4.000000000000000, 4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000,
        8.500000000000000, 9.000000000000000, 9.500000000000000, 10.000000000000000 };
    double[] b = new double[] {10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000,
        10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-20.000000000000000, -19.500000000000000, -19.000000000000000, -18.500000000000000, -18.000000000000000, -17.500000000000000, -17.000000000000000,
        -16.500000000000000, -16.000000000000000, -15.500000000000000, -15.000000000000000, -14.500000000000000, -14.000000000000000, -13.500000000000000, -13.000000000000000, -12.500000000000000,
        -12.000000000000000, -11.500000000000000, -11.000000000000000, -10.500000000000000, -9.500000000000000, -9.000000000000000, -8.500000000000000, -8.000000000000000, -7.500000000000000,
        -7.000000000000000, -6.500000000000000, -6.000000000000000, -5.500000000000000, -5.000000000000000, -4.500000000000000, -4.000000000000000, -3.500000000000000, -3.000000000000000,
        -2.500000000000000, -2.000000000000000, -1.500000000000000, -1.000000000000000, -0.500000000000000, 0.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_subx(n, a, zero, b, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_ceil() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-6.000000000000000, -5.000000000000000, -3.000000000000000, -2.000000000000000, -1.000000000000000, 0.000000000000000, 2.000000000000000, 3.000000000000000,
        4.000000000000000, 5.000000000000000, 7.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_ceil(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_floor() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-7.000000000000000, -5.000000000000000, -4.000000000000000, -3.000000000000000, -2.000000000000000, 0.000000000000000, 1.000000000000000, 2.000000000000000,
        3.000000000000000, 5.000000000000000, 6.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_floor(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_modf() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y1 = new double[a.length];
    double[] y2 = new double[a.length];
    double[] y_expected1 = new double[] {-6.000000000000000, -5.000000000000000, -3.000000000000000, -2.000000000000000, -1.000000000000000, 0.000000000000000, 1.000000000000000, 2.000000000000000,
        3.000000000000000, 5.000000000000000, 6.000000000000000 };
    double[] y_expected2 = new double[] {-0.250000000000000, 0.000000000000000, -0.750000000000000, -0.500000000000000, -0.250000000000000, 0.000000000000000, 0.250000000000000, 0.500000000000000,
        0.750000000000000, 0.000000000000000, 0.250000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_modf(n, a, zero, y1, zero, y2, zero);
    assertTrue(FPEquals.fuzzyEquals(y1, y_expected1));
    assertTrue(FPEquals.fuzzyEquals(y2, y_expected2));
  }

  @Test
  public void vd_nearbyint() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-6.000000000000000, -5.000000000000000, -4.000000000000000, -2.000000000000000, -1.000000000000000, 0.000000000000000, 1.000000000000000, 2.000000000000000,
        4.000000000000000, 5.000000000000000, 6.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_nearbyint(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_rint() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-6.000000000000000, -5.000000000000000, -4.000000000000000, -2.000000000000000, -1.000000000000000, 0.000000000000000, 1.000000000000000, 2.000000000000000,
        4.000000000000000, 5.000000000000000, 6.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_rint(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_round() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-6.000000000000000, -5.000000000000000, -4.000000000000000, -3.000000000000000, -1.000000000000000, 0.000000000000000, 1.000000000000000, 3.000000000000000,
        4.000000000000000, 5.000000000000000, 6.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_round(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_trunc() {
    double[] a = new double[] {-6.250000000000000, -5.000000000000000, -3.750000000000000, -2.500000000000000, -1.250000000000000, 0.000000000000000, 1.250000000000000, 2.500000000000000,
        3.750000000000000, 5.000000000000000, 6.250000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-6.000000000000000, -5.000000000000000, -3.000000000000000, -2.000000000000000, -1.000000000000000, 0.000000000000000, 1.000000000000000, 2.000000000000000,
        3.000000000000000, 5.000000000000000, 6.000000000000000 };
    int[] n = new int[] {a.length };
    _izy.vd_trunc(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test(expectedExceptions = MathsExceptionNotImplemented.class)
  public void vd_cdfnorm() {
    _izy.vd_cdfnorm(zero, null, zero, null, zero);
  }

  @Test(expectedExceptions = MathsExceptionNotImplemented.class)
  public void vd_cdfnorminv() {
    _izy.vd_cdfnorminv(zero, null, zero, null, zero);
  }

  @Test
  public void vd_erf() {
    double[] a = new double[] {-1.000000000000000, -0.894736842105263, -0.789473684210526, -0.684210526315789, -0.578947368421053, -0.473684210526316, -0.368421052631579, -0.263157894736842,
        -0.157894736842105, -0.052631578947368, 0.052631578947368, 0.157894736842105, 0.263157894736842, 0.368421052631579, 0.473684210526316, 0.578947368421053, 0.684210526315789, 0.789473684210526,
        0.894736842105263, 1.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-0.842700792949715, -0.794253743061750, -0.735785152222156, -0.666765717934895, -0.587073915796180, -0.497072489758696, -0.397651375028688, -0.290227363926707,
        -0.176695543284396, -0.059333585842953, 0.059333585842953, 0.176695543284396, 0.290227363926707, 0.397651375028688, 0.497072489758695, 0.587073915796180, 0.666765717934894, 0.735785152222156,
        0.794253743061749, 0.842700792949715 };
    int[] n = new int[] {a.length };
    _izy.vd_erf(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_erfc() {
    double[] a = new double[] {-1.000000000000000, -0.894736842105263, -0.789473684210526, -0.684210526315789, -0.578947368421053, -0.473684210526316, -0.368421052631579, -0.263157894736842,
        -0.157894736842105, -0.052631578947368, 0.052631578947368, 0.157894736842105, 0.263157894736842, 0.368421052631579, 0.473684210526316, 0.578947368421053, 0.684210526315789, 0.789473684210526,
        0.894736842105263, 1.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {1.842700792949715, 1.794253743061750, 1.735785152222156, 1.666765717934894, 1.587073915796180, 1.497072489758696, 1.397651375028688, 1.290227363926707,
        1.176695543284396, 1.059333585842953, 0.940666414157047, 0.823304456715604, 0.709772636073293, 0.602348624971312, 0.502927510241305, 0.412926084203820, 0.333234282065106, 0.264214847777844,
        0.205746256938250, 0.157299207050285 };
    int[] n = new int[] {a.length };
    _izy.vd_erfc(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test(expectedExceptions = MathsExceptionNotImplemented.class)
  public void vd_erfinv() {
    _izy.vd_erfinv(zero, null, zero, null, zero);
  }

  @Test(expectedExceptions = MathsExceptionNotImplemented.class)
  public void vd_erfcinv() {
    _izy.vd_erfcinv(zero, null, zero, null, zero);
  }

  @Test
  public void vd_lgamma() {
    double[] a = new double[] {-9.500000000000000, -8.500000000000000, -7.500000000000000, -6.500000000000000, -5.500000000000000, -4.500000000000000, -3.500000000000000, -2.500000000000000,
        -1.500000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {-12.795895333554364, -10.544603534947868, -8.404537371451598, -6.389634350909332, -4.517832174007742, -2.813084081769316, -1.309006684993042,
        -0.056243716497674, 0.860047015376481, 1.265512123484645, 0.572364942924700, 0.000000000000000, -0.120782237635245, 0.000000000000000, 0.284682870472919, 0.693147180559945, 1.200973602347074,
        1.791759469228055, 2.453736570842442, 3.178053830347946, 3.957813967618717, 4.787491742782046, 5.662562059857141, 6.579251212010101, 7.534364236758734, 8.525161361065413, 9.549267257300997,
        10.604602902745251, 11.689333420797269, 12.801827480081471 };
    int[] n = new int[] {a.length };
    _izy.vd_lgamma(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEquals(y, y_expected));
  }

  @Test
  public void vd_tgamma() {
    double[] a = new double[] {-9.500000000000000, -8.500000000000000, -7.500000000000000, -6.500000000000000, -5.500000000000000, -4.500000000000000, -3.500000000000000, -2.500000000000000,
        -1.500000000000000, -0.500000000000000, 0.500000000000000, 1.000000000000000, 1.500000000000000, 2.000000000000000, 2.500000000000000, 3.000000000000000, 3.500000000000000, 4.000000000000000,
        4.500000000000000, 5.000000000000000, 5.500000000000000, 6.000000000000000, 6.500000000000000, 7.000000000000000, 7.500000000000000, 8.000000000000000, 8.500000000000000, 9.000000000000000,
        9.500000000000000, 10.000000000000000 };
    double[] y = new double[a.length];
    double[] y_expected = new double[] {0.0000027721279115750996, -0.0000263352151599634859, 0.0002238493288596894303, -0.0016788699664476726924, 0.0109126547819098571046, -0.0600196013005042453003,
        0.2700882058522690587488, -0.9453087204829417888874, 2.3632718012073543611962, -3.5449077018110317638389, 1.7724538509055161039640, 1.0000000000000000000000, 0.8862269254527580519820,
        1.0000000000000000000000, 1.3293403881791370224619, 2.0000000000000000000000, 3.3233509704478425561547, 6.0000000000000000000000, 11.6317283965674498347198, 24.0000000000000035527137,
        52.3427777845535331380233, 119.9999999999999715782906, 287.8852778150441622528888, 720.0000000000001136868377, 1871.2543057977895841759164, 5039.9999999999927240423858,
        14034.4072934834020998096094, 40320.0000000000218278728426, 119292.4619946090097073465586, 362880.0000000004656612873077 };
    int[] n = new int[] {a.length };
    _izy.vd_tgamma(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEqualsDynamicTol(y, y_expected));
  }

  @Test
  public void vz_abs() {
    double[] a = new double[] {-10, -100, -9.5, -95, -9, -90, -8.5, -85, -8, -80, -7.5, -75, -7, -70, -6.5, -65, -6, -60, -5.5, -55, -5, -50, -4.5, -45, -4, -40, -3.5, -35, -3, -30, -2.5, -25, -2,
        -20, -1.5, -15, -1, -10, -0.5, -5, 0, 0, 0.5, 5, 1, 10, 1.5, 15, 2, 20, 2.5, 25, 3, 30, 3.5, 35, 4, 40, 4.5, 45, 5, 50, 5.5, 55, 6, 60, 6.5, 65, 7, 70, 7.5, 75, 8, 80, 8.5, 85, 9, 90, 9.5,
        95, 10, 100 };
    double[] y = new double[a.length / 2];
    double[] y_expected = new double[] {100.498756211208899458, 95.473818400648454485, 90.448880590088009512, 85.423942779527564539, 80.399004968967119567, 75.374067158406674594,
        70.349129347846229621, 65.324191537285784648, 60.299253726725339675, 55.274315916164894702, 50.249378105604449729, 45.224440295044004756, 40.199502484483559783, 35.174564673923114810,
        30.149626863362669837, 25.124689052802224865, 20.099751242241779892, 15.074813431681334919, 10.049875621120889946, 5.024937810560444973, 0.000000000000000000, 5.024937810560444973,
        10.049875621120889946, 15.074813431681334919, 20.099751242241779892, 25.124689052802224865, 30.149626863362669837, 35.174564673923114810, 40.199502484483559783, 45.224440295044004756,
        50.249378105604449729, 55.274315916164894702, 60.299253726725339675, 65.324191537285784648, 70.349129347846229621, 75.374067158406674594, 80.399004968967119567, 85.423942779527564539,
        90.448880590088009512, 95.473818400648454485, 100.498756211208899458 };
    int[] n = new int[] {a.length / 2 };
    _izy.vz_abs(n, a, zero, y, zero);
    assertTrue(FPEquals.fuzzyEqualsDynamicTol(y, y_expected));
  }

  @Test
  public void vz_acos() {
  }

  @Test
  public void vz_acosh() {
  }

  @Test
  public void vz_add() {
  }

  @Test
  public void vz_addx() {
  }

  @Test
  public void vz_arg() {
  }

  @Test
  public void vz_asin() {
  }

  @Test
  public void vz_asinh() {
  }

  @Test
  public void vz_atan() {
  }

  @Test
  public void vz_atanh() {
  }

  @Test
  public void vz_conj() {
  }

  @Test
  public void vz_cos() {
  }

  @Test
  public void vz_cosh() {
  }

  @Test
  public void vz_div() {
  }

  @Test
  public void vz_divx() {
  }

  @Test
  public void vz_exp() {
  }

  @Test
  public void vz_ln() {
  }

  @Test
  public void vz_log10() {
  }

  @Test
  public void vz_mul() {
  }

  @Test
  public void vz_mulx() {
  }

  @Test
  public void vz_mulbyconj() {
  }

  @Test
  public void vz_pow() {
  }

  @Test
  public void vz_powx() {
  }

  @Test
  public void vz_sin() {
  }

  @Test
  public void vz_sinh() {
  }

  @Test
  public void vz_sqrt() {
  }

  @Test
  public void vz_sub() {
  }

  @Test
  public void vz_subx() {
  }

  @Test
  public void vz_tan() {
  }

  @Test
  public void vz_tanh() {
  }

}
