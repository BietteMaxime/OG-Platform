/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.maths.lowlevelapi.slatec.fnlib;

import static org.testng.Assert.assertTrue;

import org.testng.annotations.Test;

import com.opengamma.maths.lowlevelapi.exposedapi.SLATEC;
import com.opengamma.maths.lowlevelapi.functions.FPEquals;
import com.opengamma.maths.lowlevelapi.functions.MathBits;
import com.opengamma.maths.nativewrappers.exceptions.OGNativeMathsWrapperInvalidArgumentException;

/**
 * Tests double atanh()
 */
@Test
public class DATANHTest {

  static double[] input = new double[] {-0.9795918367346938548934, -0.9591836734693877097868, -0.9387755102040815646802, -0.9183673469387755305959, -0.8979591836734693854893,
      -0.8775510204081632403827, -0.8571428571428572062985, -0.8367346938775510611919, -0.8163265306122449160853, -0.7959183673469387709787, -0.7755102040816326258721, -0.7551020408163265917878,
      -0.7346938775510204466812, -0.7142857142857143015746, -0.6938775510204082674903, -0.6734693877551021223837, -0.6530612244897959772771, -0.6326530612244898321705, -0.6122448979591836870640,
      -0.5918367346938776529797, -0.5714285714285715078731, -0.5510204081632653627665, -0.5306122448979593286822, -0.5102040816326531835756, -0.4897959183673470384690, -0.4693877551020408933624,
      -0.4489795918367348037670, -0.4285714285714287141715, -0.4081632653061225690649, -0.3877551020408164239583, -0.3673469387755103898741, -0.3469387755102042447675, -0.3265306122448980441497,
      -0.3061224489795920100654, -0.2857142857142858649588, -0.2653061224489797753634, -0.2448979591836736025012, -0.2244897959183675129058, -0.2040816326530613677992, -0.1836734693877552782038,
      -0.1632653061224491330972, -0.1428571428571429879906, -0.1224489795918368983951, -0.1020408163265308087997, -0.0816326530612247053265, -0.0612244897959185671588, -0.0408163265306124636855,
      -0.0204081632653063636818, -0.0000000000000001928655, 0.0000000000000001928655, 0.0204081632653063636818, 0.0408163265306124636855, 0.0612244897959185671588, 0.0816326530612247053265,
      0.1020408163265308087997, 0.1224489795918368983951, 0.1428571428571429879906, 0.1632653061224491330972, 0.1836734693877552782038, 0.2040816326530613677992, 0.2244897959183675129058,
      0.2448979591836736025012, 0.2653061224489797753634, 0.2857142857142858649588, 0.3061224489795920100654, 0.3265306122448980441497, 0.3469387755102042447675, 0.3673469387755103898741,
      0.3877551020408164239583, 0.4081632653061225690649, 0.4285714285714287141715, 0.4489795918367348037670, 0.4693877551020408933624, 0.4897959183673470384690, 0.5102040816326531835756,
      0.5306122448979593286822, 0.5510204081632653627665, 0.5714285714285715078731, 0.5918367346938776529797, 0.6122448979591836870640, 0.6326530612244898321705, 0.6530612244897959772771,
      0.6734693877551021223837, 0.6938775510204082674903, 0.7142857142857143015746, 0.7346938775510204466812, 0.7551020408163265917878, 0.7755102040816326258721, 0.7959183673469387709787,
      0.8163265306122449160853, 0.8367346938775510611919, 0.8571428571428572062985, 0.8775510204081632403827, 0.8979591836734693854893, 0.9183673469387755305959, 0.9387755102040815646802,
      0.9591836734693877097868, 0.9795918367346938548934 };

  static double[] expected = new double[] {-2.2873554892516909653466, -1.9356005054539449083961, -1.7276323014662149368803, -1.5785002105750567391595, -1.4615807903595776640060,
      -1.3650145539104925340723, -1.2824746787307685913504, -1.2101840643252146367814, -1.1457058961979602607073, -1.0873758607420804800370, -1.0340064229281065166788, -0.9847203232327538247048,
      -0.9388509495143899652447, -0.8958797346140274786563, -0.8553952033471940996634, -0.8170652625122361012444, -0.7806179053081114815882, -0.7458274383888585656877, -0.7125044366502905068828,
      -0.6804882765678005318577, -0.6496414920651305546784, -0.6198454434640077170826, -0.5909969488035805573745, -0.5630056314281122187282, -0.5357918081400953047577, -0.5092847904972868100515,
      -0.4834215055184932774424, -0.4581453659370777198312, -0.4334053373053927682435, -0.4091551617569758048099, -0.3853527074529101148492, -0.3619594196133496533108, -0.3389398542145785619972,
      -0.3162612793717554104944, -0.2938933324510596412082, -0.2718077232944909882306, -0.2499779757645435585012, -0.2283792012478576549661, -0.2069878988880366477154, -0.1857817782162416997416,
      -0.1647396005651213246601, -0.1438410362258906172173, -0.1230665347694544220492, -0.1023972063230068063611, -0.0818147118909012538435, -0.0613011610461663830618, -0.0408390155071338065151,
      -0.0204109972601278083504, -0.0000000000000001928655, 0.0000000000000001928655, 0.0204109972601278083504, 0.0408390155071338065151, 0.0613011610461663830618, 0.0818147118909012538435,
      0.1023972063230068063611, 0.1230665347694544220492, 0.1438410362258906172173, 0.1647396005651213246601, 0.1857817782162416997416, 0.2069878988880366477154, 0.2283792012478576549661,
      0.2499779757645435585012, 0.2718077232944909882306, 0.2938933324510596412082, 0.3162612793717554104944, 0.3389398542145785619972, 0.3619594196133496533108, 0.3853527074529101148492,
      0.4091551617569758048099, 0.4334053373053927682435, 0.4581453659370777198312, 0.4834215055184932774424, 0.5092847904972868100515, 0.5357918081400953047577, 0.5630056314281122187282,
      0.5909969488035805573745, 0.6198454434640077170826, 0.6496414920651305546784, 0.6804882765678005318577, 0.7125044366502905068828, 0.7458274383888585656877, 0.7806179053081114815882,
      0.8170652625122361012444, 0.8553952033471940996634, 0.8958797346140274786563, 0.9388509495143899652447, 0.9847203232327538247048, 1.0340064229281065166788, 1.0873758607420804800370,
      1.1457058961979602607073, 1.2101840643252146367814, 1.2824746787307685913504, 1.3650145539104925340723, 1.4615807903595776640060, 1.5785002105750567391595, 1.7276323014662149368803,
      1.9356005054539449083961, 2.2873554892516909653466 };

  @Test
  public static void datanhRangeTest() {
    double ans;
    for (int i = 0; i < input.length; i++) {
      ans = SLATEC.getInstance().datanh(input[i]);
      assertTrue(FPEquals.fuzzyEquals(expected[i], ans));
    }
  }

  @Test(expectedExceptions = OGNativeMathsWrapperInvalidArgumentException.class)
  public static void datanhIllegalArgPosTest() {
    SLATEC.getInstance().datanh(1.1);
  }

  @Test(expectedExceptions = OGNativeMathsWrapperInvalidArgumentException.class)
  public static void datanhIllegalArgNegTest() {
    SLATEC.getInstance().datanh(-1.1);
  }

  @Test
  public static void invokePrecisionWarningTest() {
    SLATEC.getInstance().datanh(MathBits.getLargestPositiveNormalMoreNegativeThanOne());
  }

}
