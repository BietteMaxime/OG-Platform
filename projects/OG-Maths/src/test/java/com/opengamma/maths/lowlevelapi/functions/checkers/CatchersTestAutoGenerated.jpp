#define COMMENTSTR SLASHSLASH THIS CODE IS AUTOGENERATED FROM __FILE__ via cpp -E __FILE__|sed -e '/^#/d' -e 's/SLASHSLASH/\/\//g'\
Followed by Shift+Ctrl+F to make the formatting more suitable for mortals
COMMENTSTR



// invokes function subst on primitives
#define INVOKEPRIMIVITES(TESTFUNCTION) TESTFUNCTION(short)\
TESTFUNCTION(int)\
TESTFUNCTION(long)\
TESTFUNCTION(float)\
TESTFUNCTION(double)

// NULL type checks first
#define TESTNULLPTR(TYPE) @Test(expectedExceptions = MathsExceptionNullPointer.class)\
  public static void TYPE##NullPtrTest() {\
    TYPE[] tmp = null;\
    Catchers.catchNull(tmp);\
  }
#define TESTNULLPTRWSTR(TYPE) @Test(expectedExceptions = MathsExceptionNullPointer.class)\
  public static void TYPE##NullPtrTestWStrTest() {\
    TYPE[] tmp = null;\
    Catchers.catchNull(tmp,"STR");\
  }
#define TESTNULLFROMARGLIST(TYPE) @Test(expectedExceptions = MathsExceptionNullPointer.class)\
 public static void TYPE##CatchNullFromArgListTest() {\
  TYPE[] tmp = null;\
    Catchers.catchNullFromArgList(tmp,1);\
  }
#define TESTNULLS(TYPE) TESTNULLPTR(TYPE) TESTNULLPTRWSTR(TYPE) TESTNULLFROMARGLIST(TYPE)


// Numeric type checks second
#define TESTCATCHCONDITIONS(TYPE,CONDITIONSTR,VALUE,VALUESTR)  @Test(expectedExceptions = MathsExceptionIllegalArgument.class)\
 public static void TYPE##catchValueShouldNotBe##CONDITIONSTR##FromArgList##VALUESTR##Test() {\
    TYPE tmp = (TYPE)VALUE;\
    Catchers.catchValueShouldNotBe##CONDITIONSTR##FromArgList(tmp,1);\
    }

#define TESTCATCHNEGATIVECONDITIONS(TYPE) TESTCATCHCONDITIONS(TYPE,Negative,-1,MinusOne)
#define TESTCATCHNEGATIVEORZEROCONDITIONS(TYPE) TESTCATCHCONDITIONS(TYPE,NegativeOrZero,0,Zero)\
 TESTCATCHCONDITIONS(TYPE,NegativeOrZero,-1,MinusOne)    
#define TESTCATCHPOSITIVECONDITIONS(TYPE) TESTCATCHCONDITIONS(TYPE,Positive,+1,PlusOne)
#define TESTCATCHPOSITIVEORZEROCONDITIONS(TYPE) TESTCATCHCONDITIONS(TYPE,PositiveOrZero,+1,PlusOne)\
 TESTCATCHCONDITIONS(TYPE,PositiveOrZero,0,Zero)
#define TESTCATCHALLCONDITIONS(TYPE) \
 TESTCATCHNEGATIVECONDITIONS(TYPE)\
 TESTCATCHNEGATIVEORZEROCONDITIONS(TYPE)\
 TESTCATCHPOSITIVECONDITIONS(TYPE)\
 TESTCATCHPOSITIVEORZEROCONDITIONS(TYPE) 


// Numeric comparison checks third
#define TESTCATCHCOMPARISONSFROMARGLIST(TYPE, CONDITIONSTR, THENUMBER, THECOMPARISONVALUE,VALUESTR) @Test(expectedExceptions = MathsExceptionIllegalArgument.class)\
  public static void TYPE##catchValueShouldBe##CONDITIONSTR##XFromArgList##VALUESTR##Test() {\
  TYPE number = (TYPE) THENUMBER;\
  TYPE comparedTo = (TYPE) THECOMPARISONVALUE;\
  Catchers.catchValueShouldBe##CONDITIONSTR##XFromArgList(number,comparedTo,1);\
  }
#define TESTCATCHLESSTHANFROMARGLIST(TYPE) TESTCATCHCOMPARISONSFROMARGLIST(TYPE, LessThan, 1, 0, OneZero)\
 TESTCATCHCOMPARISONSFROMARGLIST(TYPE, LessThan, 0, 0, ZeroZero)
#define TESTCATCHLESSTHANOREQUALTOFROMARGLIST(TYPE) TESTCATCHCOMPARISONSFROMARGLIST(TYPE, LessThanOrEqualTo, 1, 0, OneZero)
#define TESTCATCHGREATERTHANFROMARGLIST(TYPE) TESTCATCHCOMPARISONSFROMARGLIST(TYPE, GreaterThan, 0, 1, ZeroOne)\
 TESTCATCHCOMPARISONSFROMARGLIST(TYPE, GreaterThan, 0, 0, ZeroZero)  
#define TESTCATCHGREATERTHANOREQUALTOFROMARGLIST(TYPE) TESTCATCHCOMPARISONSFROMARGLIST(TYPE, GreaterThanOrEqualTo, 0, 1, ZeroOne)\
 
#define TESTCATCHALLCOMPARISONS(TYPE) TESTCATCHLESSTHANFROMARGLIST(TYPE) TESTCATCHGREATERTHANFROMARGLIST(TYPE) TESTCATCHLESSTHANOREQUALTOFROMARGLIST(TYPE) TESTCATCHGREATERTHANOREQUALTOFROMARGLIST(TYPE)
  
// write out functions
/**
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.maths.lowlevelapi.functions.checkers;

import org.testng.annotations.Test;

import com.opengamma.maths.commonapi.exceptions.MathsExceptionIllegalArgument;
import com.opengamma.maths.commonapi.exceptions.MathsExceptionNullPointer;

/**
 * Tests that the code that catches bad inputs or nasty conditions works. 
 * This contents is autogenerated from CatchersTestAutogenerated.jpp
 */
public class CatchersTestAutoGenerated {
// invoke macros
TESTNULLS(boolean)
TESTNULLS(Object)

INVOKEPRIMIVITES(TESTNULLS)
INVOKEPRIMIVITES(TESTCATCHALLCONDITIONS)
INVOKEPRIMIVITES(TESTCATCHALLCOMPARISONS)
} // endclass



