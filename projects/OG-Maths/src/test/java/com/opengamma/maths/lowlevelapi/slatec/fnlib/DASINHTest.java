/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.maths.lowlevelapi.slatec.fnlib;

import static org.testng.Assert.assertTrue;

import org.testng.annotations.Test;

import com.opengamma.maths.lowlevelapi.exposedapi.SLATEC;
import com.opengamma.maths.lowlevelapi.functions.FPEquals;

/**
 * Tests double asinh()
 */
@Test
public class DASINHTest {

  static double[] input = new double[] {
      -10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376.0000000000000000000000,
      -8452712498170643941637436558664265704301557216577944354047371344426782440907597751590676094202515006314790319892114058862117560952042968596008623655407033230534186943984081346699704282822823056848387726531379014466368452684024987821414350380272583623832617294363807973376.0000000000000000000000,
      -6668014432879854274079851790721257797144758322315908160396257811764037237817632071521432200871554290742929910593433240445888801654119365080363356052330830046095157579514014558463078285911814024728965016135886601981690748037476461291163877376.0000000000000000000000,
      -5260135901548373507240989882880128665550339802823173859498280903068732154297080822113666536277588451226982968856178217713019432250183803863127814770651880849955223671128444598191663757884322717271293251735781376.0000000000000000000000,
      -4149515568880992958512407863691161151012446232242436899995657329690652811412908146399707048947103794288197886611300789182395151075411775307886874834113963687061181803401509523685376.0000000000000000000000,
      -3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545885393053328527589376.0000000000000000000000,
      -2582249878086908589655919172003011874329705792829223512830659356540647622016841194629645353280137831435903171972747493376.0000000000000000000000,
      -2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376.0000000000000000000000,
      -1606938044258990275541962092341162602522202993782792835301376.0000000000000000000000,
      -1267650600228229401496703205376.0000000000000000000000,
      -1.0000000000000000000000,
      1.0000000000000000000000,
      1267650600228229401496703205376.0000000000000000000000,
      1606938044258990275541962092341162602522202993782792835301376.0000000000000000000000,
      2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376.0000000000000000000000,
      2582249878086908589655919172003011874329705792829223512830659356540647622016841194629645353280137831435903171972747493376.0000000000000000000000,
      3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545885393053328527589376.0000000000000000000000,
      4149515568880992958512407863691161151012446232242436899995657329690652811412908146399707048947103794288197886611300789182395151075411775307886874834113963687061181803401509523685376.0000000000000000000000,
      5260135901548373507240989882880128665550339802823173859498280903068732154297080822113666536277588451226982968856178217713019432250183803863127814770651880849955223671128444598191663757884322717271293251735781376.0000000000000000000000,
      6668014432879854274079851790721257797144758322315908160396257811764037237817632071521432200871554290742929910593433240445888801654119365080363356052330830046095157579514014558463078285911814024728965016135886601981690748037476461291163877376.0000000000000000000000,
      8452712498170643941637436558664265704301557216577944354047371344426782440907597751590676094202515006314790319892114058862117560952042968596008623655407033230534186943984081346699704282822823056848387726531379014466368452684024987821414350380272583623832617294363807973376.0000000000000000000000,
      10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376.0000000000000000000000 };

  static double[] expected = new double[] {-693.8403277405052449466893, -624.5256096845106412729365, -555.2108916285161512860213, -485.8961735725216612991062, -416.5814555165271144687722,
      -347.2667374605326244818571, -277.9520194045380776515231, -208.6373013485435308211891, -139.3225832925490124125645, -70.0078652365544797930852, -0.8813735870195430477381,
      0.8813735870195430477381, 70.0078652365544797930852, 139.3225832925490124125645, 208.6373013485435308211891, 277.9520194045380776515231, 347.2667374605326244818571, 416.5814555165271144687722,
      485.8961735725216612991062, 555.2108916285161512860213, 624.5256096845106412729365, 693.8403277405052449466893 };

  //log(logspace(eps,1))
  static double[] smallInput = new double[] {0.0000000000000004440892, 0.0469915325100831240968, 0.0939830650201656375708, 0.1409745975302481579838, 0.1879661300403307477858,
      0.2349576625504132820765, 0.2819491950604957608562, 0.3289407275705782951469, 0.3759322600806608849489, 0.4229237925907434747508, 0.4699153251008260090416, 0.5169068576109085988435,
      0.5638983901209910776231, 0.6108899226310737784473, 0.6578814551411562572270, 0.7048729876512388470289, 0.7518645201613212147862, 0.7988560526714040266327, 0.8458475851814865054124,
      0.8928391176915689841920, 0.9398306502016515739939, 0.9868221827117342748181, 1.0338137152218165315531, 1.0808052477318990103328, 1.1277967802419819332016, 1.1747883127520644119812,
      1.2217798452621471128055, 1.2687713777722293695405, 1.3157629102823120703647, 1.3627544427923945491443, 1.4097459753024770279239, 1.4567375078125597287482, 1.5037290403226422075278,
      1.5507205728327249083520, 1.5977121053428073871316, 1.6447036378528898659113, 1.6916951703629725667355, 1.7386867028730550455151, 1.7856782353831375242947, 1.8326697678932200030744,
      1.8796613004033027038986, 1.9266528329133851826782, 1.9736443654234678835024, 2.0206358979335501402375, 2.0676274304436330631063, 2.1146189629537155418859, 2.1616104954637980206655,
      2.2086020279738804994452, 2.2555935604839629782248, 2.3025850929940459010936 };

  static double[] smallExpected = new double[] {0.0000000000000004440892, 0.0469742551902394972485, 0.0938452562170609128067, 0.1405117738042305219892, 0.1868765195668909417925,
      0.2328478555316520481888, 0.2783412202427597015308, 0.3232802212630654925540, 0.3675973727042140537513, 0.4112344835346095628381, 0.4541427248733087007615, 0.4962824205611126027193,
      0.5376226145382546617313, 0.5781404715097342439378, 0.6178205652684688464760, 0.6566541033854806919123, 0.6946381292580938726644, 0.7317747340032150216160, 0.7680703023483840263808,
      0.8035348091353889943278, 0.8381811766492381909899, 0.8720246978365295831281, 0.9050825265462602020605, 0.9373732330857663663792, 0.9689164214636885041898, 0.9997324035087168381253,
      1.0298419244356127322249, 1.0592659342280454914942, 1.0880253992962496401020, 1.1161411491471497914318, 1.1436337531997466943068, 1.1705234233333177140679, 1.1968299382309381950762,
      1.2225725860490923579960, 1.2477701223886370485161, 1.2724407409530293922018, 1.2966020546515428790713, 1.3202710852366550398074, 1.3434642598566646221059, 1.3661974131590548520165,
      1.3884857938001737842626, 1.4103440744058055589250, 1.4317863641885928416286, 1.4528262235654147982444, 1.4734766802338530311545, 1.4937502462646565781768, 1.5136589358492578138993,
      1.5332142834101318840112, 1.5524273618391799534066, 1.5713088006770572491178 };

  @Test
  public static void dasinhRangeTest() {
    double ans;
    for (int i = 0; i < input.length; i++) {
      ans = SLATEC.getInstance().dasinh(input[i]);
      assertTrue(FPEquals.fuzzyEquals(expected[i], ans));
    }
  }

  @Test
  public static void dasinhSmallRangeTest() {
    double ans;
    for (int i = 0; i < smallInput.length; i++) {
      ans = SLATEC.getInstance().dasinh(smallInput[i]);
      assertTrue(FPEquals.fuzzyEquals(smallExpected[i], ans));
    }
  }

}
