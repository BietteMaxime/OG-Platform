/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.component.factory.metric;

import java.util.LinkedHashMap;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;

import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;
import com.opengamma.util.metric.OpenGammaMetricRegistry;
import com.yammer.metrics.JmxReporter;
import com.yammer.metrics.MetricRegistry;
import com.yammer.metrics.Slf4jReporter;

import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.slf4j.LoggerFactory;

/**
 * 
 */
@BeanDefinition
public class MetricRepositoryFactory extends AbstractComponentFactory {
  @PropertyDefinition(validate = "notEmpty")
  private String _registryName;
  
  @PropertyDefinition
  private boolean _jmxPublish = true;

  @PropertyDefinition
  private boolean _slf4jPublish = true;

  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) throws Exception {
    MetricRegistry metricRegistry = new MetricRegistry(getRegistryName());
    
    if (isJmxPublish()) {
      JmxReporter jmxReporter = JmxReporter.forRegistry(metricRegistry).build();
      jmxReporter.start();
    }
    
    if (isSlf4jPublish()) {
      Slf4jReporter logReporter = Slf4jReporter.forRegistry(metricRegistry)
          .outputTo(LoggerFactory.getLogger(OpenGammaMetricRegistry.class))
          .convertRatesTo(TimeUnit.SECONDS)
          .convertDurationsTo(TimeUnit.MILLISECONDS)
          .build();
      logReporter.start(1, TimeUnit.MINUTES);
    }
    
    OpenGammaMetricRegistry.setRegistry(metricRegistry);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code MetricRepositoryFactory}.
   * @return the meta-bean, not null
   */
  public static MetricRepositoryFactory.Meta meta() {
    return MetricRepositoryFactory.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(MetricRepositoryFactory.Meta.INSTANCE);
  }

  @Override
  public MetricRepositoryFactory.Meta metaBean() {
    return MetricRepositoryFactory.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1329285016:  // registryName
        return getRegistryName();
      case 1313494970:  // jmxPublish
        return isJmxPublish();
      case 283122412:  // slf4jPublish
        return isSlf4jPublish();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1329285016:  // registryName
        setRegistryName((String) newValue);
        return;
      case 1313494970:  // jmxPublish
        setJmxPublish((Boolean) newValue);
        return;
      case 283122412:  // slf4jPublish
        setSlf4jPublish((Boolean) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notEmpty(_registryName, "registryName");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      MetricRepositoryFactory other = (MetricRepositoryFactory) obj;
      return JodaBeanUtils.equal(getRegistryName(), other.getRegistryName()) &&
          JodaBeanUtils.equal(isJmxPublish(), other.isJmxPublish()) &&
          JodaBeanUtils.equal(isSlf4jPublish(), other.isSlf4jPublish()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getRegistryName());
    hash += hash * 31 + JodaBeanUtils.hashCode(isJmxPublish());
    hash += hash * 31 + JodaBeanUtils.hashCode(isSlf4jPublish());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the registryName.
   * @return the value of the property, not null
   */
  public String getRegistryName() {
    return _registryName;
  }

  /**
   * Sets the registryName.
   * @param registryName  the new value of the property, not null
   */
  public void setRegistryName(String registryName) {
    JodaBeanUtils.notEmpty(registryName, "registryName");
    this._registryName = registryName;
  }

  /**
   * Gets the the {@code registryName} property.
   * @return the property, not null
   */
  public final Property<String> registryName() {
    return metaBean().registryName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the jmxPublish.
   * @return the value of the property
   */
  public boolean isJmxPublish() {
    return _jmxPublish;
  }

  /**
   * Sets the jmxPublish.
   * @param jmxPublish  the new value of the property
   */
  public void setJmxPublish(boolean jmxPublish) {
    this._jmxPublish = jmxPublish;
  }

  /**
   * Gets the the {@code jmxPublish} property.
   * @return the property, not null
   */
  public final Property<Boolean> jmxPublish() {
    return metaBean().jmxPublish().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the slf4jPublish.
   * @return the value of the property
   */
  public boolean isSlf4jPublish() {
    return _slf4jPublish;
  }

  /**
   * Sets the slf4jPublish.
   * @param slf4jPublish  the new value of the property
   */
  public void setSlf4jPublish(boolean slf4jPublish) {
    this._slf4jPublish = slf4jPublish;
  }

  /**
   * Gets the the {@code slf4jPublish} property.
   * @return the property, not null
   */
  public final Property<Boolean> slf4jPublish() {
    return metaBean().slf4jPublish().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code MetricRepositoryFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code registryName} property.
     */
    private final MetaProperty<String> _registryName = DirectMetaProperty.ofReadWrite(
        this, "registryName", MetricRepositoryFactory.class, String.class);
    /**
     * The meta-property for the {@code jmxPublish} property.
     */
    private final MetaProperty<Boolean> _jmxPublish = DirectMetaProperty.ofReadWrite(
        this, "jmxPublish", MetricRepositoryFactory.class, Boolean.TYPE);
    /**
     * The meta-property for the {@code slf4jPublish} property.
     */
    private final MetaProperty<Boolean> _slf4jPublish = DirectMetaProperty.ofReadWrite(
        this, "slf4jPublish", MetricRepositoryFactory.class, Boolean.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "registryName",
        "jmxPublish",
        "slf4jPublish");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1329285016:  // registryName
          return _registryName;
        case 1313494970:  // jmxPublish
          return _jmxPublish;
        case 283122412:  // slf4jPublish
          return _slf4jPublish;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends MetricRepositoryFactory> builder() {
      return new DirectBeanBuilder<MetricRepositoryFactory>(new MetricRepositoryFactory());
    }

    @Override
    public Class<? extends MetricRepositoryFactory> beanType() {
      return MetricRepositoryFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code registryName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> registryName() {
      return _registryName;
    }

    /**
     * The meta-property for the {@code jmxPublish} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Boolean> jmxPublish() {
      return _jmxPublish;
    }

    /**
     * The meta-property for the {@code slf4jPublish} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Boolean> slf4jPublish() {
      return _slf4jPublish;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
