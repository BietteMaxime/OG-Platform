package com.opengamma.masterdb.security.hibernate.future;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
@BeanDefinition
public class BondFutureBean extends FutureSecurityBean {
  
  @PropertyDefinition
  private BondFutureTypeBean _bondType;
  
  @Override
  public <T> T accept(Visitor<T> visitor) {
    return visitor.visitBondFutureType(this);
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code BondFutureBean}.
   * @return the meta-bean, not null
   */
  public static BondFutureBean.Meta meta() {
    return BondFutureBean.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(BondFutureBean.Meta.INSTANCE);
  }

  @Override
  public BondFutureBean.Meta metaBean() {
    return BondFutureBean.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 1969562781:  // bondType
        return getBondType();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 1969562781:  // bondType
        setBondType((BondFutureTypeBean) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      BondFutureBean other = (BondFutureBean) obj;
      return JodaBeanUtils.equal(getBondType(), other.getBondType()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getBondType());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the bondType.
   * @return the value of the property
   */
  public BondFutureTypeBean getBondType() {
    return _bondType;
  }

  /**
   * Sets the bondType.
   * @param bondType  the new value of the property
   */
  public void setBondType(BondFutureTypeBean bondType) {
    this._bondType = bondType;
  }

  /**
   * Gets the the {@code bondType} property.
   * @return the property, not null
   */
  public final Property<BondFutureTypeBean> bondType() {
    return metaBean().bondType().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code BondFutureBean}.
   */
  public static class Meta extends FutureSecurityBean.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code bondType} property.
     */
    private final MetaProperty<BondFutureTypeBean> _bondType = DirectMetaProperty.ofReadWrite(
        this, "bondType", BondFutureBean.class, BondFutureTypeBean.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "bondType");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1969562781:  // bondType
          return _bondType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends BondFutureBean> builder() {
      return new DirectBeanBuilder<BondFutureBean>(new BondFutureBean());
    }

    @Override
    public Class<? extends BondFutureBean> beanType() {
      return BondFutureBean.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code bondType} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<BondFutureTypeBean> bondType() {
      return _bondType;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
