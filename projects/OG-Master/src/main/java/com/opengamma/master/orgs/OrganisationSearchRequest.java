/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.orgs;

import com.opengamma.id.ObjectId;
import com.opengamma.id.ObjectIdentifiable;
import com.opengamma.master.AbstractDocument;
import com.opengamma.master.AbstractSearchRequest;
import com.opengamma.util.ArgumentChecker;
import com.opengamma.util.PublicSPI;
import com.opengamma.util.RegexUtils;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Request for searching for organisations.
 * <p/>
 * Documents will be returned that match the search criteria.
 * This class provides the ability to page the results and to search
 * as at a specific version and correction instant.
 * See {@link com.opengamma.master.orgs.OrganisationHistoryRequest} for more details on how history works.
 */
@PublicSPI
@BeanDefinition
public class OrganisationSearchRequest extends AbstractSearchRequest {

  /**
   * The set of organisation object identifiers, null to not limit by organisation object identifiers.
   * Note that an empty set will return no organisations.
   */
  @PropertyDefinition(set = "manual")
  private List<ObjectId> _organisationObjectIds;

  /**
   * The organisation ticker, null to not match on ticker.
   */
  @PropertyDefinition
  private String _obligorTicker;

  /**
   * The organisation short name, wildcards allowed, null to not match on short name.
   */
  @PropertyDefinition
  private String _obligorShortName;

  /**
   * The Reference Entity Database code of the organisation, wildcards allowed, null to not match on RED code.
   */
  @PropertyDefinition
  private String _obligorREDCode;


  /**
   * Creates an instance.
   */
  public OrganisationSearchRequest() {
  }

  //-------------------------------------------------------------------------

  /**
   * Adds a single organisation object identifier to the set.
   *
   * @param organisationId the organisation object identifier to add, not null
   */
  public void addOrganisationObjectId(ObjectIdentifiable organisationId) {
    ArgumentChecker.notNull(organisationId, "organisationId");
    if (_organisationObjectIds == null) {
      _organisationObjectIds = new ArrayList<ObjectId>();
    }
    _organisationObjectIds.add(organisationId.getObjectId());
  }

  /**
   * Sets the set of organisation object identifiers, null to not limit by organisation object identifiers.
   * Note that an empty set will return no organisations.
   *
   * @param organisationIds the new organisation identifiers, null clears the position id search
   */
  public void setOrganisationObjectIds(Iterable<? extends ObjectIdentifiable> organisationIds) {
    if (organisationIds == null) {
      _organisationObjectIds = null;
    } else {
      _organisationObjectIds = new ArrayList<ObjectId>();
      for (ObjectIdentifiable organisationId : organisationIds) {
        _organisationObjectIds.add(organisationId.getObjectId());
      }
    }
  }


  //-------------------------------------------------------------------------
  @Override
  public boolean matches(final AbstractDocument obj) {
    if (obj instanceof OrganisationDocument == false) {
      return false;
    }
    final OrganisationDocument document = (OrganisationDocument) obj;
    final ManageableOrganisation organisation = document.getOrganisation();
    if (getOrganisationObjectIds() != null && getOrganisationObjectIds().contains(document.getObjectId()) == false) {
      return false;
    }
    if (getObligorShortName() != null && RegexUtils.wildcardMatch(getObligorShortName(), organisation.getObligor().getObligorShortName()) == false) {
      return false;
    }
    if (getObligorREDCode() != null && RegexUtils.wildcardMatch(getObligorREDCode(), organisation.getObligor().getObligorREDCode()) == false) {
      return false;
    }
    if (getObligorTicker() != null && !getObligorShortName().equalsIgnoreCase(organisation.getObligor().getObligorShortName())) {
      return false;
    }
    return true;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code OrganisationSearchRequest}.
   * @return the meta-bean, not null
   */
  public static OrganisationSearchRequest.Meta meta() {
    return OrganisationSearchRequest.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(OrganisationSearchRequest.Meta.INSTANCE);
  }

  @Override
  public OrganisationSearchRequest.Meta metaBean() {
    return OrganisationSearchRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -666913985:  // organisationObjectIds
        return getOrganisationObjectIds();
      case 896190372:  // obligorTicker
        return getObligorTicker();
      case -1066272179:  // obligorShortName
        return getObligorShortName();
      case -823370556:  // obligorREDCode
        return getObligorREDCode();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -666913985:  // organisationObjectIds
        setOrganisationObjectIds((List<ObjectId>) newValue);
        return;
      case 896190372:  // obligorTicker
        setObligorTicker((String) newValue);
        return;
      case -1066272179:  // obligorShortName
        setObligorShortName((String) newValue);
        return;
      case -823370556:  // obligorREDCode
        setObligorREDCode((String) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      OrganisationSearchRequest other = (OrganisationSearchRequest) obj;
      return JodaBeanUtils.equal(getOrganisationObjectIds(), other.getOrganisationObjectIds()) &&
          JodaBeanUtils.equal(getObligorTicker(), other.getObligorTicker()) &&
          JodaBeanUtils.equal(getObligorShortName(), other.getObligorShortName()) &&
          JodaBeanUtils.equal(getObligorREDCode(), other.getObligorREDCode()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getOrganisationObjectIds());
    hash += hash * 31 + JodaBeanUtils.hashCode(getObligorTicker());
    hash += hash * 31 + JodaBeanUtils.hashCode(getObligorShortName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getObligorREDCode());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the set of organisation object identifiers, null to not limit by organisation object identifiers.
   * Note that an empty set will return no organisations.
   * @return the value of the property
   */
  public List<ObjectId> getOrganisationObjectIds() {
    return _organisationObjectIds;
  }

  /**
   * Gets the the {@code organisationObjectIds} property.
   * Note that an empty set will return no organisations.
   * @return the property, not null
   */
  public final Property<List<ObjectId>> organisationObjectIds() {
    return metaBean().organisationObjectIds().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the organisation ticker, null to not match on ticker.
   * @return the value of the property
   */
  public String getObligorTicker() {
    return _obligorTicker;
  }

  /**
   * Sets the organisation ticker, null to not match on ticker.
   * @param obligorTicker  the new value of the property
   */
  public void setObligorTicker(String obligorTicker) {
    this._obligorTicker = obligorTicker;
  }

  /**
   * Gets the the {@code obligorTicker} property.
   * @return the property, not null
   */
  public final Property<String> obligorTicker() {
    return metaBean().obligorTicker().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the organisation short name, wildcards allowed, null to not match on short name.
   * @return the value of the property
   */
  public String getObligorShortName() {
    return _obligorShortName;
  }

  /**
   * Sets the organisation short name, wildcards allowed, null to not match on short name.
   * @param obligorShortName  the new value of the property
   */
  public void setObligorShortName(String obligorShortName) {
    this._obligorShortName = obligorShortName;
  }

  /**
   * Gets the the {@code obligorShortName} property.
   * @return the property, not null
   */
  public final Property<String> obligorShortName() {
    return metaBean().obligorShortName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the Reference Entity Database code of the organisation, wildcards allowed, null to not match on RED code.
   * @return the value of the property
   */
  public String getObligorREDCode() {
    return _obligorREDCode;
  }

  /**
   * Sets the Reference Entity Database code of the organisation, wildcards allowed, null to not match on RED code.
   * @param obligorREDCode  the new value of the property
   */
  public void setObligorREDCode(String obligorREDCode) {
    this._obligorREDCode = obligorREDCode;
  }

  /**
   * Gets the the {@code obligorREDCode} property.
   * @return the property, not null
   */
  public final Property<String> obligorREDCode() {
    return metaBean().obligorREDCode().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code OrganisationSearchRequest}.
   */
  public static class Meta extends AbstractSearchRequest.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code organisationObjectIds} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<ObjectId>> _organisationObjectIds = DirectMetaProperty.ofReadWrite(
        this, "organisationObjectIds", OrganisationSearchRequest.class, (Class) List.class);
    /**
     * The meta-property for the {@code obligorTicker} property.
     */
    private final MetaProperty<String> _obligorTicker = DirectMetaProperty.ofReadWrite(
        this, "obligorTicker", OrganisationSearchRequest.class, String.class);
    /**
     * The meta-property for the {@code obligorShortName} property.
     */
    private final MetaProperty<String> _obligorShortName = DirectMetaProperty.ofReadWrite(
        this, "obligorShortName", OrganisationSearchRequest.class, String.class);
    /**
     * The meta-property for the {@code obligorREDCode} property.
     */
    private final MetaProperty<String> _obligorREDCode = DirectMetaProperty.ofReadWrite(
        this, "obligorREDCode", OrganisationSearchRequest.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "organisationObjectIds",
        "obligorTicker",
        "obligorShortName",
        "obligorREDCode");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -666913985:  // organisationObjectIds
          return _organisationObjectIds;
        case 896190372:  // obligorTicker
          return _obligorTicker;
        case -1066272179:  // obligorShortName
          return _obligorShortName;
        case -823370556:  // obligorREDCode
          return _obligorREDCode;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends OrganisationSearchRequest> builder() {
      return new DirectBeanBuilder<OrganisationSearchRequest>(new OrganisationSearchRequest());
    }

    @Override
    public Class<? extends OrganisationSearchRequest> beanType() {
      return OrganisationSearchRequest.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code organisationObjectIds} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<List<ObjectId>> organisationObjectIds() {
      return _organisationObjectIds;
    }

    /**
     * The meta-property for the {@code obligorTicker} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> obligorTicker() {
      return _obligorTicker;
    }

    /**
     * The meta-property for the {@code obligorShortName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> obligorShortName() {
      return _obligorShortName;
    }

    /**
     * The meta-property for the {@code obligorREDCode} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> obligorREDCode() {
      return _obligorREDCode;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
