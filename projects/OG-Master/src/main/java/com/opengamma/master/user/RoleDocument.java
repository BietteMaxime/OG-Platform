/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.user;

import com.opengamma.id.UniqueId;
import com.opengamma.master.AbstractDocument;
import com.opengamma.util.ArgumentChecker;
import com.opengamma.util.PublicSPI;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.util.Map;

/**
 * A document used to pass data in and out of the Role Master.
 */
@PublicSPI
@BeanDefinition
public class RoleDocument extends AbstractDocument implements Serializable {

  /**
   * Serialization version.
   */
  private static final long serialVersionUID = 1L;

  /**
   * The role object held by the document.
   */
  @PropertyDefinition
  private ManageableOGRole _role;
  /**
   * The role unique identifier.
   * This field is managed by the master but must be set for updates.
   */
  @PropertyDefinition
  private UniqueId _uniqueId;

  /**
   * Creates an instance.
   */
  public RoleDocument() {
  }

  /**
   * Creates an instance from an OGRole.
   *
   * @param role the role, not null
   */
  public RoleDocument(final ManageableOGRole role) {
    ArgumentChecker.notNull(role, "role");
    setUniqueId(role.getUniqueId());
    setRole(role);
  }

  //-------------------------------------------------------------------------
  @Override
  public ManageableOGRole getValue() {
    return getRole();
  }

  /**
   * Gets the display name of the role.
   * <p/>
   * This is derived from the role itself.
   *
   * @return the name, null if no name
   */
  public String getName() {
    return (getRole() != null ? getRole().getName() : null);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code RoleDocument}.
   * @return the meta-bean, not null
   */
  public static RoleDocument.Meta meta() {
    return RoleDocument.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(RoleDocument.Meta.INSTANCE);
  }

  @Override
  public RoleDocument.Meta metaBean() {
    return RoleDocument.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 3506294:  // role
        return getRole();
      case -294460212:  // uniqueId
        return getUniqueId();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 3506294:  // role
        setRole((ManageableOGRole) newValue);
        return;
      case -294460212:  // uniqueId
        setUniqueId((UniqueId) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      RoleDocument other = (RoleDocument) obj;
      return JodaBeanUtils.equal(getRole(), other.getRole()) &&
          JodaBeanUtils.equal(getUniqueId(), other.getUniqueId()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getRole());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUniqueId());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the role object held by the document.
   * @return the value of the property
   */
  public ManageableOGRole getRole() {
    return _role;
  }

  /**
   * Sets the role object held by the document.
   * @param role  the new value of the property
   */
  public void setRole(ManageableOGRole role) {
    this._role = role;
  }

  /**
   * Gets the the {@code role} property.
   * @return the property, not null
   */
  public final Property<ManageableOGRole> role() {
    return metaBean().role().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the role unique identifier.
   * This field is managed by the master but must be set for updates.
   * @return the value of the property
   */
  public UniqueId getUniqueId() {
    return _uniqueId;
  }

  /**
   * Sets the role unique identifier.
   * This field is managed by the master but must be set for updates.
   * @param uniqueId  the new value of the property
   */
  public void setUniqueId(UniqueId uniqueId) {
    this._uniqueId = uniqueId;
  }

  /**
   * Gets the the {@code uniqueId} property.
   * This field is managed by the master but must be set for updates.
   * @return the property, not null
   */
  public final Property<UniqueId> uniqueId() {
    return metaBean().uniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code RoleDocument}.
   */
  public static class Meta extends AbstractDocument.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code role} property.
     */
    private final MetaProperty<ManageableOGRole> _role = DirectMetaProperty.ofReadWrite(
        this, "role", RoleDocument.class, ManageableOGRole.class);
    /**
     * The meta-property for the {@code uniqueId} property.
     */
    private final MetaProperty<UniqueId> _uniqueId = DirectMetaProperty.ofReadWrite(
        this, "uniqueId", RoleDocument.class, UniqueId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "role",
        "uniqueId");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3506294:  // role
          return _role;
        case -294460212:  // uniqueId
          return _uniqueId;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends RoleDocument> builder() {
      return new DirectBeanBuilder<RoleDocument>(new RoleDocument());
    }

    @Override
    public Class<? extends RoleDocument> beanType() {
      return RoleDocument.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code role} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ManageableOGRole> role() {
      return _role;
    }

    /**
     * The meta-property for the {@code uniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueId> uniqueId() {
      return _uniqueId;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
