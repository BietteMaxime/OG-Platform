/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.config;

import java.util.Map;

import javax.time.Instant;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.config.impl.ConfigItem;
import com.opengamma.id.ObjectId;
import com.opengamma.id.UniqueId;
import com.opengamma.master.AbstractDocument;
import com.opengamma.util.PublicSPI;

/**
 * A document used to pass into and out of the config master.
 *
 */
@PublicSPI
@BeanDefinition
public class ConfigDocument extends AbstractDocument<ConfigItem<?>> {

  /**
   * Creates an empty document.
   *
   */
  @SuppressWarnings("unchecked")
  public ConfigDocument(ConfigItem<?> configItem) {
    // this method accepts a ? rather than a ConfigItem<?> for caller flexibility
    setObject(configItem);
  }

  public <T> ConfigDocument(T value, Class<T> type, String name, UniqueId uid, Instant versionFrom, Instant versionTo, Instant correctionFrom, Instant correctionTo) {
    ConfigItem<T> item = new ConfigItem<T>(value);
    item.setName(name);
    setVersionFromInstant(versionFrom);
    setVersionToInstant(versionTo);
    setCorrectionFromInstant(correctionFrom);
    setCorrectionToInstant(correctionTo);
    item.setType(type);
    setObject(item);
  }

  /**
   * The config unique identifier.
   * This field is managed by the master but must be set for updates.
   */
  private UniqueId _uniqueId;

  @Override
  public UniqueId getUniqueId() {
    if (_uniqueId == null && getObject() != null && getObject().getUniqueId() != null) {
      _uniqueId = getObject().getUniqueId();
    }
    return _uniqueId;
  }

  @Override
  public void setUniqueId(UniqueId uniqueId) {
    _uniqueId = uniqueId;
    if (getObject() != null) {
      getObject().setUniqueId(uniqueId);
    }
  }

  /**
   * Creates an empty document.
   * This constructor is here for automated bean construction.
   * This document is invalid until the document class gets set 
   */
  private ConfigDocument() {
  }

  @Override
  public ObjectId getObjectId() {
    return getObject().getObjectId();
  }
 
  private String _name;

  public void setName(String name) {
    _name = name;
    if (getObject() != null) {
      getObject().setName(_name);
    }
  }


  public String getName() {
    if (_name == null && getObject() != null && getObject().getName() != null) {
      _name = getObject().getName();
    }
    return _name;
  }

  @Override
  public void setObject(ConfigItem<?> object) {
    super.setObject(object);
    if (object != null) {
      if (_name == null && object.getName() != null) {
        _name = object.getName();
      } else if (_name != null && object.getName() == null) {
        object.setName(_name);
      }
      if (_uniqueId == null && object.getUniqueId() != null) {
        _uniqueId = object.getUniqueId();
      } else if (_uniqueId != null && object.getUniqueId() == null) {
        object.setUniqueId(_uniqueId);
      }
    }
  }

  public Class getType() {
    if (getObject() != null) {
      return getObject().getType();
    } else {
      return null;
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ConfigDocument}.
   * @return the meta-bean, not null
   */
  public static ConfigDocument.Meta meta() {
    return ConfigDocument.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(ConfigDocument.Meta.INSTANCE);
  }

  @Override
  public ConfigDocument.Meta metaBean() {
    return ConfigDocument.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ConfigDocument}.
   */
  public static class Meta extends AbstractDocument.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap());

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    public BeanBuilder<? extends ConfigDocument> builder() {
      return new DirectBeanBuilder<ConfigDocument>(new ConfigDocument());
    }

    @Override
    public Class<? extends ConfigDocument> beanType() {
      return ConfigDocument.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
