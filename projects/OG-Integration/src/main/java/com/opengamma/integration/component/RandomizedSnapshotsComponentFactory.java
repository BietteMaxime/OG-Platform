/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.integration.component;

import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;
import com.opengamma.integration.web.RandomizedMarketDataSnapshotListResource;
import com.opengamma.master.marketdatasnapshot.MarketDataSnapshotMaster;
import org.joda.beans.Bean;

/**
 * Component factory for creating and registering a {@link RandomizedMarketDataSnapshotListResource}.
 */
@BeanDefinition
public class RandomizedSnapshotsComponentFactory extends AbstractComponentFactory {

  @PropertyDefinition(validate = "notNull")
  private MarketDataSnapshotMaster _snapshotMaster;

  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> config) throws Exception {
    repo.getRestComponents().publishResource(new RandomizedMarketDataSnapshotListResource(_snapshotMaster));
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code RandomizedSnapshotsComponentFactory}.
   * @return the meta-bean, not null
   */
  public static RandomizedSnapshotsComponentFactory.Meta meta() {
    return RandomizedSnapshotsComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(RandomizedSnapshotsComponentFactory.Meta.INSTANCE);
  }

  @Override
  public RandomizedSnapshotsComponentFactory.Meta metaBean() {
    return RandomizedSnapshotsComponentFactory.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the snapshotMaster.
   * @return the value of the property, not null
   */
  public MarketDataSnapshotMaster getSnapshotMaster() {
    return _snapshotMaster;
  }

  /**
   * Sets the snapshotMaster.
   * @param snapshotMaster  the new value of the property, not null
   */
  public void setSnapshotMaster(MarketDataSnapshotMaster snapshotMaster) {
    JodaBeanUtils.notNull(snapshotMaster, "snapshotMaster");
    this._snapshotMaster = snapshotMaster;
  }

  /**
   * Gets the the {@code snapshotMaster} property.
   * @return the property, not null
   */
  public final Property<MarketDataSnapshotMaster> snapshotMaster() {
    return metaBean().snapshotMaster().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public RandomizedSnapshotsComponentFactory clone() {
    return (RandomizedSnapshotsComponentFactory) super.clone();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      RandomizedSnapshotsComponentFactory other = (RandomizedSnapshotsComponentFactory) obj;
      return JodaBeanUtils.equal(getSnapshotMaster(), other.getSnapshotMaster()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getSnapshotMaster());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("RandomizedSnapshotsComponentFactory{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("snapshotMaster").append('=').append(getSnapshotMaster()).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code RandomizedSnapshotsComponentFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code snapshotMaster} property.
     */
    private final MetaProperty<MarketDataSnapshotMaster> _snapshotMaster = DirectMetaProperty.ofReadWrite(
        this, "snapshotMaster", RandomizedSnapshotsComponentFactory.class, MarketDataSnapshotMaster.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "snapshotMaster");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2046916282:  // snapshotMaster
          return _snapshotMaster;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends RandomizedSnapshotsComponentFactory> builder() {
      return new DirectBeanBuilder<RandomizedSnapshotsComponentFactory>(new RandomizedSnapshotsComponentFactory());
    }

    @Override
    public Class<? extends RandomizedSnapshotsComponentFactory> beanType() {
      return RandomizedSnapshotsComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code snapshotMaster} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<MarketDataSnapshotMaster> snapshotMaster() {
      return _snapshotMaster;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -2046916282:  // snapshotMaster
          return ((RandomizedSnapshotsComponentFactory) bean).getSnapshotMaster();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -2046916282:  // snapshotMaster
          ((RandomizedSnapshotsComponentFactory) bean).setSnapshotMaster((MarketDataSnapshotMaster) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((RandomizedSnapshotsComponentFactory) bean)._snapshotMaster, "snapshotMaster");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
