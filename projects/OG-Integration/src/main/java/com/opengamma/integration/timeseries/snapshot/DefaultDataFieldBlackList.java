/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.integration.timeseries.snapshot;

import java.util.List;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;

import com.google.common.collect.Lists;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * 
 */
@BeanDefinition
public class DefaultDataFieldBlackList extends DirectBean implements DataFieldBlackList {
  
  @PropertyDefinition(validate = "notNull")
  private String _name;
  
  @PropertyDefinition(validate = "notNull")
  private List<String> _dataFieldBlackList = Lists.newArrayList();

//  @Override
//  public String getName() {
//    return _name;
//  }
//
//  @Override
//  public List<String> getDataFieldBlackList() {
//    return _dataFieldBlackList;
//  }
//
//  /**
//   * Sets the name.
//   * @param name  the name
//   */
//  public void setName(String name) {
//    _name = name;
//  }
//
//  /**
//   * Sets the dataFieldBlackList.
//   * @param dataFieldBlackList  the dataFieldBlackList
//   */
//  public void setDataFieldBlackList(List<String> dataFieldBlackList) {
//    _dataFieldBlackList = dataFieldBlackList;
//  }
//  
//  /**
//   * Returns a description of this object suitable for debugging.
//   * 
//   * @return the description, not null
//   */
//  @Override
//  public String toString() {
//    return getClass().getSimpleName() + "[" + _name + "]";
//  }
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DefaultDataFieldBlackList}.
   * @return the meta-bean, not null
   */
  public static DefaultDataFieldBlackList.Meta meta() {
    return DefaultDataFieldBlackList.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(DefaultDataFieldBlackList.Meta.INSTANCE);
  }

  @Override
  public DefaultDataFieldBlackList.Meta metaBean() {
    return DefaultDataFieldBlackList.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 3373707:  // name
        return getName();
      case 1058119597:  // dataFieldBlackList
        return getDataFieldBlackList();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 3373707:  // name
        setName((String) newValue);
        return;
      case 1058119597:  // dataFieldBlackList
        setDataFieldBlackList((List<String>) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_name, "name");
    JodaBeanUtils.notNull(_dataFieldBlackList, "dataFieldBlackList");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DefaultDataFieldBlackList other = (DefaultDataFieldBlackList) obj;
      return JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getDataFieldBlackList(), other.getDataFieldBlackList());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getDataFieldBlackList());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name.
   * @return the value of the property, not null
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the name.
   * @param name  the new value of the property, not null
   */
  public void setName(String name) {
    JodaBeanUtils.notNull(name, "name");
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the dataFieldBlackList.
   * @return the value of the property, not null
   */
  public List<String> getDataFieldBlackList() {
    return _dataFieldBlackList;
  }

  /**
   * Sets the dataFieldBlackList.
   * @param dataFieldBlackList  the new value of the property, not null
   */
  public void setDataFieldBlackList(List<String> dataFieldBlackList) {
    JodaBeanUtils.notNull(dataFieldBlackList, "dataFieldBlackList");
    this._dataFieldBlackList = dataFieldBlackList;
  }

  /**
   * Gets the the {@code dataFieldBlackList} property.
   * @return the property, not null
   */
  public final Property<List<String>> dataFieldBlackList() {
    return metaBean().dataFieldBlackList().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DefaultDataFieldBlackList}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", DefaultDataFieldBlackList.class, String.class);
    /**
     * The meta-property for the {@code dataFieldBlackList} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<String>> _dataFieldBlackList = DirectMetaProperty.ofReadWrite(
        this, "dataFieldBlackList", DefaultDataFieldBlackList.class, (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name",
        "dataFieldBlackList");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return _name;
        case 1058119597:  // dataFieldBlackList
          return _dataFieldBlackList;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends DefaultDataFieldBlackList> builder() {
      return new DirectBeanBuilder<DefaultDataFieldBlackList>(new DefaultDataFieldBlackList());
    }

    @Override
    public Class<? extends DefaultDataFieldBlackList> beanType() {
      return DefaultDataFieldBlackList.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code dataFieldBlackList} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<List<String>> dataFieldBlackList() {
      return _dataFieldBlackList;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
