/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.integration.timeseries.snapshot;

import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.quartz.JobDetail;
import org.quartz.Trigger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.quartz.CronTriggerBean;

import com.google.common.collect.Maps;
import com.opengamma.component.ComponentInfo;
import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;

/**
 * Component factory to setup quartz cron trigger.
 */
@BeanDefinition
public class CronTriggerComponentFactory extends AbstractComponentFactory {
  
  private static final Logger s_logger = LoggerFactory.getLogger(CronTriggerComponentFactory.class);
  
  /**
   * The classifier that the factory should publish under.
   */
  @PropertyDefinition(validate = "notNull")
  private String _classifier;
  
  @PropertyDefinition(validate = "notNull")
  private JobDetail _jobDetail;

  @PropertyDefinition(validate = "notNull")
  private String _name;

  @PropertyDefinition(validate = "notNull")
  private String _cronExpression;
  
  @PropertyDefinition
  private SchemeBlackList _schemeBlackList;
  
  @PropertyDefinition
  private DataFieldBlackList _dataFieldBlackList;
  
  @PropertyDefinition(validate = "notNull")
  private String _dataSource;
  
  @PropertyDefinition(validate = "notNull")
  private String _normalizationRuleSetId;
  
  @PropertyDefinition(validate = "notNull")
  private String _observationTime;

  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) throws Exception {
    
    ComponentInfo info = new ComponentInfo(Trigger.class, getClassifier());
    
    Map<Object, Object> jobDataAsMap = Maps.newHashMap();
    jobDataAsMap.put("dataSource", getDataSource());
    jobDataAsMap.put("normalizationRuleSetId", getNormalizationRuleSetId());
    jobDataAsMap.put("observationTime", getObservationTime());
    if (getDataFieldBlackList() != null) {
      jobDataAsMap.put("dataFieldBlackList", getDataFieldBlackList());
    }
    if (getSchemeBlackList() != null) {
      jobDataAsMap.put("schemeBlackList", getSchemeBlackList());
    }
        
    CronTriggerBean cronTriggerBean = new CronTriggerBean();
    cronTriggerBean.setBeanName(getName());
    cronTriggerBean.setJobDetail(getJobDetail());
    cronTriggerBean.setCronExpression(getCronExpression());
    cronTriggerBean.setJobDataAsMap(jobDataAsMap);
    cronTriggerBean.afterPropertiesSet();
    
    repo.registerComponent(info, cronTriggerBean);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CronTriggerComponentFactory}.
   * @return the meta-bean, not null
   */
  public static CronTriggerComponentFactory.Meta meta() {
    return CronTriggerComponentFactory.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(CronTriggerComponentFactory.Meta.INSTANCE);
  }

  @Override
  public CronTriggerComponentFactory.Meta metaBean() {
    return CronTriggerComponentFactory.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -281470431:  // classifier
        return getClassifier();
      case 686431854:  // jobDetail
        return getJobDetail();
      case 3373707:  // name
        return getName();
      case -348729402:  // cronExpression
        return getCronExpression();
      case 836243736:  // schemeBlackList
        return getSchemeBlackList();
      case 1058119597:  // dataFieldBlackList
        return getDataFieldBlackList();
      case 1272470629:  // dataSource
        return getDataSource();
      case 650692196:  // normalizationRuleSetId
        return getNormalizationRuleSetId();
      case 951232793:  // observationTime
        return getObservationTime();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -281470431:  // classifier
        setClassifier((String) newValue);
        return;
      case 686431854:  // jobDetail
        setJobDetail((JobDetail) newValue);
        return;
      case 3373707:  // name
        setName((String) newValue);
        return;
      case -348729402:  // cronExpression
        setCronExpression((String) newValue);
        return;
      case 836243736:  // schemeBlackList
        setSchemeBlackList((SchemeBlackList) newValue);
        return;
      case 1058119597:  // dataFieldBlackList
        setDataFieldBlackList((DataFieldBlackList) newValue);
        return;
      case 1272470629:  // dataSource
        setDataSource((String) newValue);
        return;
      case 650692196:  // normalizationRuleSetId
        setNormalizationRuleSetId((String) newValue);
        return;
      case 951232793:  // observationTime
        setObservationTime((String) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_classifier, "classifier");
    JodaBeanUtils.notNull(_jobDetail, "jobDetail");
    JodaBeanUtils.notNull(_name, "name");
    JodaBeanUtils.notNull(_cronExpression, "cronExpression");
    JodaBeanUtils.notNull(_dataSource, "dataSource");
    JodaBeanUtils.notNull(_normalizationRuleSetId, "normalizationRuleSetId");
    JodaBeanUtils.notNull(_observationTime, "observationTime");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CronTriggerComponentFactory other = (CronTriggerComponentFactory) obj;
      return JodaBeanUtils.equal(getClassifier(), other.getClassifier()) &&
          JodaBeanUtils.equal(getJobDetail(), other.getJobDetail()) &&
          JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getCronExpression(), other.getCronExpression()) &&
          JodaBeanUtils.equal(getSchemeBlackList(), other.getSchemeBlackList()) &&
          JodaBeanUtils.equal(getDataFieldBlackList(), other.getDataFieldBlackList()) &&
          JodaBeanUtils.equal(getDataSource(), other.getDataSource()) &&
          JodaBeanUtils.equal(getNormalizationRuleSetId(), other.getNormalizationRuleSetId()) &&
          JodaBeanUtils.equal(getObservationTime(), other.getObservationTime()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getClassifier());
    hash += hash * 31 + JodaBeanUtils.hashCode(getJobDetail());
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCronExpression());
    hash += hash * 31 + JodaBeanUtils.hashCode(getSchemeBlackList());
    hash += hash * 31 + JodaBeanUtils.hashCode(getDataFieldBlackList());
    hash += hash * 31 + JodaBeanUtils.hashCode(getDataSource());
    hash += hash * 31 + JodaBeanUtils.hashCode(getNormalizationRuleSetId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getObservationTime());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the classifier that the factory should publish under.
   * @return the value of the property, not null
   */
  public String getClassifier() {
    return _classifier;
  }

  /**
   * Sets the classifier that the factory should publish under.
   * @param classifier  the new value of the property, not null
   */
  public void setClassifier(String classifier) {
    JodaBeanUtils.notNull(classifier, "classifier");
    this._classifier = classifier;
  }

  /**
   * Gets the the {@code classifier} property.
   * @return the property, not null
   */
  public final Property<String> classifier() {
    return metaBean().classifier().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the jobDetail.
   * @return the value of the property, not null
   */
  public JobDetail getJobDetail() {
    return _jobDetail;
  }

  /**
   * Sets the jobDetail.
   * @param jobDetail  the new value of the property, not null
   */
  public void setJobDetail(JobDetail jobDetail) {
    JodaBeanUtils.notNull(jobDetail, "jobDetail");
    this._jobDetail = jobDetail;
  }

  /**
   * Gets the the {@code jobDetail} property.
   * @return the property, not null
   */
  public final Property<JobDetail> jobDetail() {
    return metaBean().jobDetail().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name.
   * @return the value of the property, not null
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the name.
   * @param name  the new value of the property, not null
   */
  public void setName(String name) {
    JodaBeanUtils.notNull(name, "name");
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the cronExpression.
   * @return the value of the property, not null
   */
  public String getCronExpression() {
    return _cronExpression;
  }

  /**
   * Sets the cronExpression.
   * @param cronExpression  the new value of the property, not null
   */
  public void setCronExpression(String cronExpression) {
    JodaBeanUtils.notNull(cronExpression, "cronExpression");
    this._cronExpression = cronExpression;
  }

  /**
   * Gets the the {@code cronExpression} property.
   * @return the property, not null
   */
  public final Property<String> cronExpression() {
    return metaBean().cronExpression().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the schemeBlackList.
   * @return the value of the property
   */
  public SchemeBlackList getSchemeBlackList() {
    return _schemeBlackList;
  }

  /**
   * Sets the schemeBlackList.
   * @param schemeBlackList  the new value of the property
   */
  public void setSchemeBlackList(SchemeBlackList schemeBlackList) {
    this._schemeBlackList = schemeBlackList;
  }

  /**
   * Gets the the {@code schemeBlackList} property.
   * @return the property, not null
   */
  public final Property<SchemeBlackList> schemeBlackList() {
    return metaBean().schemeBlackList().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the dataFieldBlackList.
   * @return the value of the property
   */
  public DataFieldBlackList getDataFieldBlackList() {
    return _dataFieldBlackList;
  }

  /**
   * Sets the dataFieldBlackList.
   * @param dataFieldBlackList  the new value of the property
   */
  public void setDataFieldBlackList(DataFieldBlackList dataFieldBlackList) {
    this._dataFieldBlackList = dataFieldBlackList;
  }

  /**
   * Gets the the {@code dataFieldBlackList} property.
   * @return the property, not null
   */
  public final Property<DataFieldBlackList> dataFieldBlackList() {
    return metaBean().dataFieldBlackList().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the dataSource.
   * @return the value of the property, not null
   */
  public String getDataSource() {
    return _dataSource;
  }

  /**
   * Sets the dataSource.
   * @param dataSource  the new value of the property, not null
   */
  public void setDataSource(String dataSource) {
    JodaBeanUtils.notNull(dataSource, "dataSource");
    this._dataSource = dataSource;
  }

  /**
   * Gets the the {@code dataSource} property.
   * @return the property, not null
   */
  public final Property<String> dataSource() {
    return metaBean().dataSource().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the normalizationRuleSetId.
   * @return the value of the property, not null
   */
  public String getNormalizationRuleSetId() {
    return _normalizationRuleSetId;
  }

  /**
   * Sets the normalizationRuleSetId.
   * @param normalizationRuleSetId  the new value of the property, not null
   */
  public void setNormalizationRuleSetId(String normalizationRuleSetId) {
    JodaBeanUtils.notNull(normalizationRuleSetId, "normalizationRuleSetId");
    this._normalizationRuleSetId = normalizationRuleSetId;
  }

  /**
   * Gets the the {@code normalizationRuleSetId} property.
   * @return the property, not null
   */
  public final Property<String> normalizationRuleSetId() {
    return metaBean().normalizationRuleSetId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the observationTime.
   * @return the value of the property, not null
   */
  public String getObservationTime() {
    return _observationTime;
  }

  /**
   * Sets the observationTime.
   * @param observationTime  the new value of the property, not null
   */
  public void setObservationTime(String observationTime) {
    JodaBeanUtils.notNull(observationTime, "observationTime");
    this._observationTime = observationTime;
  }

  /**
   * Gets the the {@code observationTime} property.
   * @return the property, not null
   */
  public final Property<String> observationTime() {
    return metaBean().observationTime().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CronTriggerComponentFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code classifier} property.
     */
    private final MetaProperty<String> _classifier = DirectMetaProperty.ofReadWrite(
        this, "classifier", CronTriggerComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code jobDetail} property.
     */
    private final MetaProperty<JobDetail> _jobDetail = DirectMetaProperty.ofReadWrite(
        this, "jobDetail", CronTriggerComponentFactory.class, JobDetail.class);
    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", CronTriggerComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code cronExpression} property.
     */
    private final MetaProperty<String> _cronExpression = DirectMetaProperty.ofReadWrite(
        this, "cronExpression", CronTriggerComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code schemeBlackList} property.
     */
    private final MetaProperty<SchemeBlackList> _schemeBlackList = DirectMetaProperty.ofReadWrite(
        this, "schemeBlackList", CronTriggerComponentFactory.class, SchemeBlackList.class);
    /**
     * The meta-property for the {@code dataFieldBlackList} property.
     */
    private final MetaProperty<DataFieldBlackList> _dataFieldBlackList = DirectMetaProperty.ofReadWrite(
        this, "dataFieldBlackList", CronTriggerComponentFactory.class, DataFieldBlackList.class);
    /**
     * The meta-property for the {@code dataSource} property.
     */
    private final MetaProperty<String> _dataSource = DirectMetaProperty.ofReadWrite(
        this, "dataSource", CronTriggerComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code normalizationRuleSetId} property.
     */
    private final MetaProperty<String> _normalizationRuleSetId = DirectMetaProperty.ofReadWrite(
        this, "normalizationRuleSetId", CronTriggerComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code observationTime} property.
     */
    private final MetaProperty<String> _observationTime = DirectMetaProperty.ofReadWrite(
        this, "observationTime", CronTriggerComponentFactory.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "classifier",
        "jobDetail",
        "name",
        "cronExpression",
        "schemeBlackList",
        "dataFieldBlackList",
        "dataSource",
        "normalizationRuleSetId",
        "observationTime");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return _classifier;
        case 686431854:  // jobDetail
          return _jobDetail;
        case 3373707:  // name
          return _name;
        case -348729402:  // cronExpression
          return _cronExpression;
        case 836243736:  // schemeBlackList
          return _schemeBlackList;
        case 1058119597:  // dataFieldBlackList
          return _dataFieldBlackList;
        case 1272470629:  // dataSource
          return _dataSource;
        case 650692196:  // normalizationRuleSetId
          return _normalizationRuleSetId;
        case 951232793:  // observationTime
          return _observationTime;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CronTriggerComponentFactory> builder() {
      return new DirectBeanBuilder<CronTriggerComponentFactory>(new CronTriggerComponentFactory());
    }

    @Override
    public Class<? extends CronTriggerComponentFactory> beanType() {
      return CronTriggerComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code classifier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> classifier() {
      return _classifier;
    }

    /**
     * The meta-property for the {@code jobDetail} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<JobDetail> jobDetail() {
      return _jobDetail;
    }

    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code cronExpression} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> cronExpression() {
      return _cronExpression;
    }

    /**
     * The meta-property for the {@code schemeBlackList} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<SchemeBlackList> schemeBlackList() {
      return _schemeBlackList;
    }

    /**
     * The meta-property for the {@code dataFieldBlackList} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<DataFieldBlackList> dataFieldBlackList() {
      return _dataFieldBlackList;
    }

    /**
     * The meta-property for the {@code dataSource} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> dataSource() {
      return _dataSource;
    }

    /**
     * The meta-property for the {@code normalizationRuleSetId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> normalizationRuleSetId() {
      return _normalizationRuleSetId;
    }

    /**
     * The meta-property for the {@code observationTime} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> observationTime() {
      return _observationTime;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
