/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.integration.timeseries.snapshot;

import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.quartz.JobDataMap;
import org.quartz.JobDetail;
import org.springframework.scheduling.quartz.JobDetailBean;

import com.opengamma.component.ComponentInfo;
import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;
import com.opengamma.master.historicaltimeseries.HistoricalTimeSeriesMaster;
import com.opengamma.util.redis.RedisConnector;

/**
 * Component factory to setup a Redis Hts snapshotter job detail for quartz scheduler
 */
@BeanDefinition
public class JobDetailComponentFactory extends AbstractComponentFactory {
  
  /**
   * The classifier that the factory should publish under.
   */
  @PropertyDefinition(validate = "notNull")
  private String _classifier;
  
  @PropertyDefinition(validate = "notNull")
  private HistoricalTimeSeriesMaster _htsMaster;
  
  @PropertyDefinition(validate = "notNull")
  private RedisConnector _redisConnector;
  
  @PropertyDefinition(validate = "notNull")
  private String _name;
  
  @PropertyDefinition
  private String _group;

  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) throws Exception {
    
    ComponentInfo info = new ComponentInfo(JobDetail.class, getClassifier());
    
    JobDataMap jobDataMap = new JobDataMap();
    jobDataMap.put("htsMaster", getHtsMaster());
    jobDataMap.put("redisConnector", getRedisConnector());
    
    JobDetailBean jobDetailBean = new JobDetailBean();
    jobDetailBean.setBeanName(getName());
    jobDetailBean.setJobClass(QuartzRedisHtsSnapshotJob.class);
    if (getGroup() != null) {
      jobDetailBean.setGroup(getGroup());
    }
    
    jobDetailBean.setJobDataMap(jobDataMap);
    jobDetailBean.afterPropertiesSet();
    
    repo.registerComponent(info, jobDetailBean);
    
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code JobDetailComponentFactory}.
   * @return the meta-bean, not null
   */
  public static JobDetailComponentFactory.Meta meta() {
    return JobDetailComponentFactory.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(JobDetailComponentFactory.Meta.INSTANCE);
  }

  @Override
  public JobDetailComponentFactory.Meta metaBean() {
    return JobDetailComponentFactory.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -281470431:  // classifier
        return getClassifier();
      case -1707859415:  // htsMaster
        return getHtsMaster();
      case -745461486:  // redisConnector
        return getRedisConnector();
      case 3373707:  // name
        return getName();
      case 98629247:  // group
        return getGroup();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -281470431:  // classifier
        setClassifier((String) newValue);
        return;
      case -1707859415:  // htsMaster
        setHtsMaster((HistoricalTimeSeriesMaster) newValue);
        return;
      case -745461486:  // redisConnector
        setRedisConnector((RedisConnector) newValue);
        return;
      case 3373707:  // name
        setName((String) newValue);
        return;
      case 98629247:  // group
        setGroup((String) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_classifier, "classifier");
    JodaBeanUtils.notNull(_htsMaster, "htsMaster");
    JodaBeanUtils.notNull(_redisConnector, "redisConnector");
    JodaBeanUtils.notNull(_name, "name");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      JobDetailComponentFactory other = (JobDetailComponentFactory) obj;
      return JodaBeanUtils.equal(getClassifier(), other.getClassifier()) &&
          JodaBeanUtils.equal(getHtsMaster(), other.getHtsMaster()) &&
          JodaBeanUtils.equal(getRedisConnector(), other.getRedisConnector()) &&
          JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getGroup(), other.getGroup()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getClassifier());
    hash += hash * 31 + JodaBeanUtils.hashCode(getHtsMaster());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRedisConnector());
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getGroup());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the classifier that the factory should publish under.
   * @return the value of the property, not null
   */
  public String getClassifier() {
    return _classifier;
  }

  /**
   * Sets the classifier that the factory should publish under.
   * @param classifier  the new value of the property, not null
   */
  public void setClassifier(String classifier) {
    JodaBeanUtils.notNull(classifier, "classifier");
    this._classifier = classifier;
  }

  /**
   * Gets the the {@code classifier} property.
   * @return the property, not null
   */
  public final Property<String> classifier() {
    return metaBean().classifier().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the htsMaster.
   * @return the value of the property, not null
   */
  public HistoricalTimeSeriesMaster getHtsMaster() {
    return _htsMaster;
  }

  /**
   * Sets the htsMaster.
   * @param htsMaster  the new value of the property, not null
   */
  public void setHtsMaster(HistoricalTimeSeriesMaster htsMaster) {
    JodaBeanUtils.notNull(htsMaster, "htsMaster");
    this._htsMaster = htsMaster;
  }

  /**
   * Gets the the {@code htsMaster} property.
   * @return the property, not null
   */
  public final Property<HistoricalTimeSeriesMaster> htsMaster() {
    return metaBean().htsMaster().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the redisConnector.
   * @return the value of the property, not null
   */
  public RedisConnector getRedisConnector() {
    return _redisConnector;
  }

  /**
   * Sets the redisConnector.
   * @param redisConnector  the new value of the property, not null
   */
  public void setRedisConnector(RedisConnector redisConnector) {
    JodaBeanUtils.notNull(redisConnector, "redisConnector");
    this._redisConnector = redisConnector;
  }

  /**
   * Gets the the {@code redisConnector} property.
   * @return the property, not null
   */
  public final Property<RedisConnector> redisConnector() {
    return metaBean().redisConnector().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name.
   * @return the value of the property, not null
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the name.
   * @param name  the new value of the property, not null
   */
  public void setName(String name) {
    JodaBeanUtils.notNull(name, "name");
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the group.
   * @return the value of the property
   */
  public String getGroup() {
    return _group;
  }

  /**
   * Sets the group.
   * @param group  the new value of the property
   */
  public void setGroup(String group) {
    this._group = group;
  }

  /**
   * Gets the the {@code group} property.
   * @return the property, not null
   */
  public final Property<String> group() {
    return metaBean().group().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code JobDetailComponentFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code classifier} property.
     */
    private final MetaProperty<String> _classifier = DirectMetaProperty.ofReadWrite(
        this, "classifier", JobDetailComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code htsMaster} property.
     */
    private final MetaProperty<HistoricalTimeSeriesMaster> _htsMaster = DirectMetaProperty.ofReadWrite(
        this, "htsMaster", JobDetailComponentFactory.class, HistoricalTimeSeriesMaster.class);
    /**
     * The meta-property for the {@code redisConnector} property.
     */
    private final MetaProperty<RedisConnector> _redisConnector = DirectMetaProperty.ofReadWrite(
        this, "redisConnector", JobDetailComponentFactory.class, RedisConnector.class);
    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", JobDetailComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code group} property.
     */
    private final MetaProperty<String> _group = DirectMetaProperty.ofReadWrite(
        this, "group", JobDetailComponentFactory.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "classifier",
        "htsMaster",
        "redisConnector",
        "name",
        "group");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return _classifier;
        case -1707859415:  // htsMaster
          return _htsMaster;
        case -745461486:  // redisConnector
          return _redisConnector;
        case 3373707:  // name
          return _name;
        case 98629247:  // group
          return _group;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends JobDetailComponentFactory> builder() {
      return new DirectBeanBuilder<JobDetailComponentFactory>(new JobDetailComponentFactory());
    }

    @Override
    public Class<? extends JobDetailComponentFactory> beanType() {
      return JobDetailComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code classifier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> classifier() {
      return _classifier;
    }

    /**
     * The meta-property for the {@code htsMaster} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<HistoricalTimeSeriesMaster> htsMaster() {
      return _htsMaster;
    }

    /**
     * The meta-property for the {@code redisConnector} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<RedisConnector> redisConnector() {
      return _redisConnector;
    }

    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code group} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> group() {
      return _group;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
