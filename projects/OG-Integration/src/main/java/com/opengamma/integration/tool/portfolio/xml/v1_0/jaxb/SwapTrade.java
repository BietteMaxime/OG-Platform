/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.integration.tool.portfolio.xml.v1_0.jaxb;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import org.threeten.bp.LocalDate;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.integration.tool.portfolio.xml.v1_0.conversion.SwapTradeSecurityExtractor;
import com.opengamma.integration.tool.portfolio.xml.v1_0.conversion.TradeSecurityExtractor;

@XmlRootElement
@BeanDefinition
public class SwapTrade extends Trade {

  @XmlElement(name = "effectiveDate", required = true)
  @PropertyDefinition
  private LocalDate _effectiveDate;

  @XmlElement(name = "fixedLeg", required = true)
  @PropertyDefinition
  private FixedLeg _fixedLeg;

  @XmlElement(name = "floatingLeg", required = true)
  @PropertyDefinition
  private FloatingLeg _floatingLeg;

  @Override
  public boolean canBePositionAggregated() {
    return false;
  }

  @Override
  public TradeSecurityExtractor getSecurityExtractor() {
    return new SwapTradeSecurityExtractor(this);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SwapTrade}.
   * @return the meta-bean, not null
   */
  public static SwapTrade.Meta meta() {
    return SwapTrade.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(SwapTrade.Meta.INSTANCE);
  }

  @Override
  public SwapTrade.Meta metaBean() {
    return SwapTrade.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -930389515:  // effectiveDate
        return getEffectiveDate();
      case -391537158:  // fixedLeg
        return getFixedLeg();
      case -1177101272:  // floatingLeg
        return getFloatingLeg();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -930389515:  // effectiveDate
        setEffectiveDate((LocalDate) newValue);
        return;
      case -391537158:  // fixedLeg
        setFixedLeg((FixedLeg) newValue);
        return;
      case -1177101272:  // floatingLeg
        setFloatingLeg((FloatingLeg) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      SwapTrade other = (SwapTrade) obj;
      return JodaBeanUtils.equal(getEffectiveDate(), other.getEffectiveDate()) &&
          JodaBeanUtils.equal(getFixedLeg(), other.getFixedLeg()) &&
          JodaBeanUtils.equal(getFloatingLeg(), other.getFloatingLeg()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getEffectiveDate());
    hash += hash * 31 + JodaBeanUtils.hashCode(getFixedLeg());
    hash += hash * 31 + JodaBeanUtils.hashCode(getFloatingLeg());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the effectiveDate.
   * @return the value of the property
   */
  public LocalDate getEffectiveDate() {
    return _effectiveDate;
  }

  /**
   * Sets the effectiveDate.
   * @param effectiveDate  the new value of the property
   */
  public void setEffectiveDate(LocalDate effectiveDate) {
    this._effectiveDate = effectiveDate;
  }

  /**
   * Gets the the {@code effectiveDate} property.
   * @return the property, not null
   */
  public final Property<LocalDate> effectiveDate() {
    return metaBean().effectiveDate().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the fixedLeg.
   * @return the value of the property
   */
  public FixedLeg getFixedLeg() {
    return _fixedLeg;
  }

  /**
   * Sets the fixedLeg.
   * @param fixedLeg  the new value of the property
   */
  public void setFixedLeg(FixedLeg fixedLeg) {
    this._fixedLeg = fixedLeg;
  }

  /**
   * Gets the the {@code fixedLeg} property.
   * @return the property, not null
   */
  public final Property<FixedLeg> fixedLeg() {
    return metaBean().fixedLeg().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the floatingLeg.
   * @return the value of the property
   */
  public FloatingLeg getFloatingLeg() {
    return _floatingLeg;
  }

  /**
   * Sets the floatingLeg.
   * @param floatingLeg  the new value of the property
   */
  public void setFloatingLeg(FloatingLeg floatingLeg) {
    this._floatingLeg = floatingLeg;
  }

  /**
   * Gets the the {@code floatingLeg} property.
   * @return the property, not null
   */
  public final Property<FloatingLeg> floatingLeg() {
    return metaBean().floatingLeg().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SwapTrade}.
   */
  public static class Meta extends Trade.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code effectiveDate} property.
     */
    private final MetaProperty<LocalDate> _effectiveDate = DirectMetaProperty.ofReadWrite(
        this, "effectiveDate", SwapTrade.class, LocalDate.class);
    /**
     * The meta-property for the {@code fixedLeg} property.
     */
    private final MetaProperty<FixedLeg> _fixedLeg = DirectMetaProperty.ofReadWrite(
        this, "fixedLeg", SwapTrade.class, FixedLeg.class);
    /**
     * The meta-property for the {@code floatingLeg} property.
     */
    private final MetaProperty<FloatingLeg> _floatingLeg = DirectMetaProperty.ofReadWrite(
        this, "floatingLeg", SwapTrade.class, FloatingLeg.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "effectiveDate",
        "fixedLeg",
        "floatingLeg");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -930389515:  // effectiveDate
          return _effectiveDate;
        case -391537158:  // fixedLeg
          return _fixedLeg;
        case -1177101272:  // floatingLeg
          return _floatingLeg;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends SwapTrade> builder() {
      return new DirectBeanBuilder<SwapTrade>(new SwapTrade());
    }

    @Override
    public Class<? extends SwapTrade> beanType() {
      return SwapTrade.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code effectiveDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> effectiveDate() {
      return _effectiveDate;
    }

    /**
     * The meta-property for the {@code fixedLeg} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FixedLeg> fixedLeg() {
      return _fixedLeg;
    }

    /**
     * The meta-property for the {@code floatingLeg} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FloatingLeg> floatingLeg() {
      return _floatingLeg;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
