/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.security.swap;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.financial.convention.businessday.BusinessDayConvention;
import com.opengamma.financial.convention.daycount.DayCount;
import com.opengamma.financial.convention.frequency.Frequency;
import com.opengamma.id.ExternalId;
import com.opengamma.util.ArgumentChecker;

/**
 * An inflation swap leg linked to an index.
 */
@BeanDefinition
public class InflationIndexSwapLeg extends InflationLeg {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The external id of the index.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _indexId;

  /**
   * The quotation lag.
   */
  @PropertyDefinition
  private int _quotationLag;

  /**
   * The conventional lag.
   */
  @PropertyDefinition
  private int _conventionalLag;

  /**
   * The interpolation method.
   */
  @PropertyDefinition(validate = "notNull")
  private InterpolationMethod _interpolationMethod;

  /**
   * For the builder.
   */
  /* package */InflationIndexSwapLeg() {
    super();
  }

  /**
   * @param dayCount The day count, not null
   * @param frequency The frequency, not null
   * @param regionId The region id, not null
   * @param businessDayConvention The business day convention, not null
   * @param notional The notional, not null
   * @param isEOM True if dates follow the EOM convention
   * @param indexId The id of the index, not null
   * @param quotationLag The quotation lag
   * @param conventionalLag The quotation lag
   * @param interpolationMethod The interpolation method, not null
   */
  public InflationIndexSwapLeg(final DayCount dayCount, final Frequency frequency, final ExternalId regionId, final BusinessDayConvention businessDayConvention,
      final Notional notional, final boolean isEOM, final ExternalId indexId, final int quotationLag, final int conventionalLag, final InterpolationMethod interpolationMethod) {
    super(dayCount, frequency, regionId, businessDayConvention, notional, isEOM);
    setIndexId(indexId);
    setQuotationLag(quotationLag);
    setConventionalLag(conventionalLag);
    setInterpolationMethod(interpolationMethod);
  }

  @Override
  public <T> T accept(final SwapLegVisitor<T> visitor) {
    ArgumentChecker.notNull(visitor, "visitor");
    return visitor.visitInflationIndexSwapLeg(this);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code InflationIndexSwapLeg}.
   * @return the meta-bean, not null
   */
  public static InflationIndexSwapLeg.Meta meta() {
    return InflationIndexSwapLeg.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(InflationIndexSwapLeg.Meta.INSTANCE);
  }

  @Override
  public InflationIndexSwapLeg.Meta metaBean() {
    return InflationIndexSwapLeg.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the external id of the index.
   * @return the value of the property, not null
   */
  public ExternalId getIndexId() {
    return _indexId;
  }

  /**
   * Sets the external id of the index.
   * @param indexId  the new value of the property, not null
   */
  public void setIndexId(ExternalId indexId) {
    JodaBeanUtils.notNull(indexId, "indexId");
    this._indexId = indexId;
  }

  /**
   * Gets the the {@code indexId} property.
   * @return the property, not null
   */
  public final Property<ExternalId> indexId() {
    return metaBean().indexId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the quotation lag.
   * @return the value of the property
   */
  public int getQuotationLag() {
    return _quotationLag;
  }

  /**
   * Sets the quotation lag.
   * @param quotationLag  the new value of the property
   */
  public void setQuotationLag(int quotationLag) {
    this._quotationLag = quotationLag;
  }

  /**
   * Gets the the {@code quotationLag} property.
   * @return the property, not null
   */
  public final Property<Integer> quotationLag() {
    return metaBean().quotationLag().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the conventional lag.
   * @return the value of the property
   */
  public int getConventionalLag() {
    return _conventionalLag;
  }

  /**
   * Sets the conventional lag.
   * @param conventionalLag  the new value of the property
   */
  public void setConventionalLag(int conventionalLag) {
    this._conventionalLag = conventionalLag;
  }

  /**
   * Gets the the {@code conventionalLag} property.
   * @return the property, not null
   */
  public final Property<Integer> conventionalLag() {
    return metaBean().conventionalLag().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the interpolation method.
   * @return the value of the property, not null
   */
  public InterpolationMethod getInterpolationMethod() {
    return _interpolationMethod;
  }

  /**
   * Sets the interpolation method.
   * @param interpolationMethod  the new value of the property, not null
   */
  public void setInterpolationMethod(InterpolationMethod interpolationMethod) {
    JodaBeanUtils.notNull(interpolationMethod, "interpolationMethod");
    this._interpolationMethod = interpolationMethod;
  }

  /**
   * Gets the the {@code interpolationMethod} property.
   * @return the property, not null
   */
  public final Property<InterpolationMethod> interpolationMethod() {
    return metaBean().interpolationMethod().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public InflationIndexSwapLeg clone() {
    return (InflationIndexSwapLeg) super.clone();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      InflationIndexSwapLeg other = (InflationIndexSwapLeg) obj;
      return JodaBeanUtils.equal(getIndexId(), other.getIndexId()) &&
          (getQuotationLag() == other.getQuotationLag()) &&
          (getConventionalLag() == other.getConventionalLag()) &&
          JodaBeanUtils.equal(getInterpolationMethod(), other.getInterpolationMethod()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getIndexId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getQuotationLag());
    hash += hash * 31 + JodaBeanUtils.hashCode(getConventionalLag());
    hash += hash * 31 + JodaBeanUtils.hashCode(getInterpolationMethod());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("InflationIndexSwapLeg{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("indexId").append('=').append(getIndexId()).append(',').append(' ');
    buf.append("quotationLag").append('=').append(getQuotationLag()).append(',').append(' ');
    buf.append("conventionalLag").append('=').append(getConventionalLag()).append(',').append(' ');
    buf.append("interpolationMethod").append('=').append(getInterpolationMethod()).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code InflationIndexSwapLeg}.
   */
  public static class Meta extends InflationLeg.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code indexId} property.
     */
    private final MetaProperty<ExternalId> _indexId = DirectMetaProperty.ofReadWrite(
        this, "indexId", InflationIndexSwapLeg.class, ExternalId.class);
    /**
     * The meta-property for the {@code quotationLag} property.
     */
    private final MetaProperty<Integer> _quotationLag = DirectMetaProperty.ofReadWrite(
        this, "quotationLag", InflationIndexSwapLeg.class, Integer.TYPE);
    /**
     * The meta-property for the {@code conventionalLag} property.
     */
    private final MetaProperty<Integer> _conventionalLag = DirectMetaProperty.ofReadWrite(
        this, "conventionalLag", InflationIndexSwapLeg.class, Integer.TYPE);
    /**
     * The meta-property for the {@code interpolationMethod} property.
     */
    private final MetaProperty<InterpolationMethod> _interpolationMethod = DirectMetaProperty.ofReadWrite(
        this, "interpolationMethod", InflationIndexSwapLeg.class, InterpolationMethod.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "indexId",
        "quotationLag",
        "conventionalLag",
        "interpolationMethod");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1943291277:  // indexId
          return _indexId;
        case -1695868826:  // quotationLag
          return _quotationLag;
        case -395555690:  // conventionalLag
          return _conventionalLag;
        case 374385573:  // interpolationMethod
          return _interpolationMethod;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends InflationIndexSwapLeg> builder() {
      return new DirectBeanBuilder<InflationIndexSwapLeg>(new InflationIndexSwapLeg());
    }

    @Override
    public Class<? extends InflationIndexSwapLeg> beanType() {
      return InflationIndexSwapLeg.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code indexId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> indexId() {
      return _indexId;
    }

    /**
     * The meta-property for the {@code quotationLag} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> quotationLag() {
      return _quotationLag;
    }

    /**
     * The meta-property for the {@code conventionalLag} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> conventionalLag() {
      return _conventionalLag;
    }

    /**
     * The meta-property for the {@code interpolationMethod} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<InterpolationMethod> interpolationMethod() {
      return _interpolationMethod;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1943291277:  // indexId
          return ((InflationIndexSwapLeg) bean).getIndexId();
        case -1695868826:  // quotationLag
          return ((InflationIndexSwapLeg) bean).getQuotationLag();
        case -395555690:  // conventionalLag
          return ((InflationIndexSwapLeg) bean).getConventionalLag();
        case 374385573:  // interpolationMethod
          return ((InflationIndexSwapLeg) bean).getInterpolationMethod();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1943291277:  // indexId
          ((InflationIndexSwapLeg) bean).setIndexId((ExternalId) newValue);
          return;
        case -1695868826:  // quotationLag
          ((InflationIndexSwapLeg) bean).setQuotationLag((Integer) newValue);
          return;
        case -395555690:  // conventionalLag
          ((InflationIndexSwapLeg) bean).setConventionalLag((Integer) newValue);
          return;
        case 374385573:  // interpolationMethod
          ((InflationIndexSwapLeg) bean).setInterpolationMethod((InterpolationMethod) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((InflationIndexSwapLeg) bean)._indexId, "indexId");
      JodaBeanUtils.notNull(((InflationIndexSwapLeg) bean)._interpolationMethod, "interpolationMethod");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
